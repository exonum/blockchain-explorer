// source: transactions.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var exonum_crypto_types_pb = require('./exonum/crypto/types_pb.js');
goog.object.extend(proto, exonum_crypto_types_pb);
var custom_types_pb = require('./custom_types_pb.js');
goog.object.extend(proto, custom_types_pb);
var enums_pb = require('./enums_pb.js');
goog.object.extend(proto, enums_pb);
goog.exportSymbol('proto.votings_service.TxAddVoterKey', null, global);
goog.exportSymbol('proto.votings_service.TxBallotConfig', null, global);
goog.exportSymbol('proto.votings_service.TxCreateVoting', null, global);
goog.exportSymbol('proto.votings_service.TxCryptoSystemSettings', null, global);
goog.exportSymbol('proto.votings_service.TxDecryptBallot', null, global);
goog.exportSymbol('proto.votings_service.TxDistrictResults', null, global);
goog.exportSymbol('proto.votings_service.TxEncryptedChoice', null, global);
goog.exportSymbol('proto.votings_service.TxFinalizeVoting', null, global);
goog.exportSymbol('proto.votings_service.TxFinalizeVotingWithResults', null, global);
goog.exportSymbol('proto.votings_service.TxIssueBallot', null, global);
goog.exportSymbol('proto.votings_service.TxPublishDecryptedBallot', null, global);
goog.exportSymbol('proto.votings_service.TxPublishDecryptionKey', null, global);
goog.exportSymbol('proto.votings_service.TxRegisterVoters', null, global);
goog.exportSymbol('proto.votings_service.TxRevokeVoterParticipation', null, global);
goog.exportSymbol('proto.votings_service.TxStopRegistration', null, global);
goog.exportSymbol('proto.votings_service.TxStopVoting', null, global);
goog.exportSymbol('proto.votings_service.TxStoreBallot', null, global);
goog.exportSymbol('proto.votings_service.TxVotingResults', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.votings_service.TxCryptoSystemSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.votings_service.TxCryptoSystemSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.votings_service.TxCryptoSystemSettings.displayName = 'proto.votings_service.TxCryptoSystemSettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.votings_service.TxDistrictResults = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.votings_service.TxDistrictResults, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.votings_service.TxDistrictResults.displayName = 'proto.votings_service.TxDistrictResults';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.votings_service.TxVotingResults = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.votings_service.TxVotingResults, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.votings_service.TxVotingResults.displayName = 'proto.votings_service.TxVotingResults';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.votings_service.TxBallotConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.votings_service.TxBallotConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.votings_service.TxBallotConfig.displayName = 'proto.votings_service.TxBallotConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.votings_service.TxCreateVoting = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.votings_service.TxCreateVoting.repeatedFields_, null);
};
goog.inherits(proto.votings_service.TxCreateVoting, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.votings_service.TxCreateVoting.displayName = 'proto.votings_service.TxCreateVoting';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.votings_service.TxRegisterVoters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.votings_service.TxRegisterVoters.repeatedFields_, null);
};
goog.inherits(proto.votings_service.TxRegisterVoters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.votings_service.TxRegisterVoters.displayName = 'proto.votings_service.TxRegisterVoters';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.votings_service.TxStopRegistration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.votings_service.TxStopRegistration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.votings_service.TxStopRegistration.displayName = 'proto.votings_service.TxStopRegistration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.votings_service.TxRevokeVoterParticipation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.votings_service.TxRevokeVoterParticipation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.votings_service.TxRevokeVoterParticipation.displayName = 'proto.votings_service.TxRevokeVoterParticipation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.votings_service.TxIssueBallot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.votings_service.TxIssueBallot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.votings_service.TxIssueBallot.displayName = 'proto.votings_service.TxIssueBallot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.votings_service.TxAddVoterKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.votings_service.TxAddVoterKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.votings_service.TxAddVoterKey.displayName = 'proto.votings_service.TxAddVoterKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.votings_service.TxEncryptedChoice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.votings_service.TxEncryptedChoice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.votings_service.TxEncryptedChoice.displayName = 'proto.votings_service.TxEncryptedChoice';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.votings_service.TxStoreBallot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.votings_service.TxStoreBallot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.votings_service.TxStoreBallot.displayName = 'proto.votings_service.TxStoreBallot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.votings_service.TxStopVoting = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.votings_service.TxStopVoting, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.votings_service.TxStopVoting.displayName = 'proto.votings_service.TxStopVoting';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.votings_service.TxPublishDecryptionKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.votings_service.TxPublishDecryptionKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.votings_service.TxPublishDecryptionKey.displayName = 'proto.votings_service.TxPublishDecryptionKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.votings_service.TxDecryptBallot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.votings_service.TxDecryptBallot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.votings_service.TxDecryptBallot.displayName = 'proto.votings_service.TxDecryptBallot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.votings_service.TxPublishDecryptedBallot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.votings_service.TxPublishDecryptedBallot.repeatedFields_, null);
};
goog.inherits(proto.votings_service.TxPublishDecryptedBallot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.votings_service.TxPublishDecryptedBallot.displayName = 'proto.votings_service.TxPublishDecryptedBallot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.votings_service.TxFinalizeVoting = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.votings_service.TxFinalizeVoting, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.votings_service.TxFinalizeVoting.displayName = 'proto.votings_service.TxFinalizeVoting';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.votings_service.TxFinalizeVotingWithResults = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.votings_service.TxFinalizeVotingWithResults, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.votings_service.TxFinalizeVotingWithResults.displayName = 'proto.votings_service.TxFinalizeVotingWithResults';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.votings_service.TxCryptoSystemSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.votings_service.TxCryptoSystemSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.votings_service.TxCryptoSystemSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.TxCryptoSystemSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    publicKey: (f = msg.getPublicKey()) && custom_types_pb.SealedBoxPublicKey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.votings_service.TxCryptoSystemSettings}
 */
proto.votings_service.TxCryptoSystemSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.votings_service.TxCryptoSystemSettings;
  return proto.votings_service.TxCryptoSystemSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.votings_service.TxCryptoSystemSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.votings_service.TxCryptoSystemSettings}
 */
proto.votings_service.TxCryptoSystemSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new custom_types_pb.SealedBoxPublicKey;
      reader.readMessage(value,custom_types_pb.SealedBoxPublicKey.deserializeBinaryFromReader);
      msg.setPublicKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.votings_service.TxCryptoSystemSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.votings_service.TxCryptoSystemSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.votings_service.TxCryptoSystemSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.TxCryptoSystemSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublicKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      custom_types_pb.SealedBoxPublicKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional SealedBoxPublicKey public_key = 1;
 * @return {?proto.votings_service.SealedBoxPublicKey}
 */
proto.votings_service.TxCryptoSystemSettings.prototype.getPublicKey = function() {
  return /** @type{?proto.votings_service.SealedBoxPublicKey} */ (
    jspb.Message.getWrapperField(this, custom_types_pb.SealedBoxPublicKey, 1));
};


/**
 * @param {?proto.votings_service.SealedBoxPublicKey|undefined} value
 * @return {!proto.votings_service.TxCryptoSystemSettings} returns this
*/
proto.votings_service.TxCryptoSystemSettings.prototype.setPublicKey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.votings_service.TxCryptoSystemSettings} returns this
 */
proto.votings_service.TxCryptoSystemSettings.prototype.clearPublicKey = function() {
  return this.setPublicKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.votings_service.TxCryptoSystemSettings.prototype.hasPublicKey = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.votings_service.TxDistrictResults.prototype.toObject = function(opt_includeInstance) {
  return proto.votings_service.TxDistrictResults.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.votings_service.TxDistrictResults} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.TxDistrictResults.toObject = function(includeInstance, msg) {
  var f, obj = {
    districtId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tallyMap: (f = msg.getTallyMap()) ? f.toObject(includeInstance, undefined) : [],
    invalidBallotsAmount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    uniqueValidBallotsAmount: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.votings_service.TxDistrictResults}
 */
proto.votings_service.TxDistrictResults.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.votings_service.TxDistrictResults;
  return proto.votings_service.TxDistrictResults.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.votings_service.TxDistrictResults} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.votings_service.TxDistrictResults}
 */
proto.votings_service.TxDistrictResults.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDistrictId(value);
      break;
    case 2:
      var value = msg.getTallyMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readUint32, null, 0, 0);
         });
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInvalidBallotsAmount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUniqueValidBallotsAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.votings_service.TxDistrictResults.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.votings_service.TxDistrictResults.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.votings_service.TxDistrictResults} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.TxDistrictResults.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDistrictId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTallyMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeUint32);
  }
  f = message.getInvalidBallotsAmount();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getUniqueValidBallotsAmount();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 district_id = 1;
 * @return {number}
 */
proto.votings_service.TxDistrictResults.prototype.getDistrictId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.votings_service.TxDistrictResults} returns this
 */
proto.votings_service.TxDistrictResults.prototype.setDistrictId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * map<uint32, uint32> tally = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.votings_service.TxDistrictResults.prototype.getTallyMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.votings_service.TxDistrictResults} returns this
 */
proto.votings_service.TxDistrictResults.prototype.clearTallyMap = function() {
  this.getTallyMap().clear();
  return this;
};


/**
 * optional uint32 invalid_ballots_amount = 3;
 * @return {number}
 */
proto.votings_service.TxDistrictResults.prototype.getInvalidBallotsAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.votings_service.TxDistrictResults} returns this
 */
proto.votings_service.TxDistrictResults.prototype.setInvalidBallotsAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 unique_valid_ballots_amount = 4;
 * @return {number}
 */
proto.votings_service.TxDistrictResults.prototype.getUniqueValidBallotsAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.votings_service.TxDistrictResults} returns this
 */
proto.votings_service.TxDistrictResults.prototype.setUniqueValidBallotsAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.votings_service.TxVotingResults.prototype.toObject = function(opt_includeInstance) {
  return proto.votings_service.TxVotingResults.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.votings_service.TxVotingResults} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.TxVotingResults.toObject = function(includeInstance, msg) {
  var f, obj = {
    districtResultsMap: (f = msg.getDistrictResultsMap()) ? f.toObject(includeInstance, proto.votings_service.TxDistrictResults.toObject) : [],
    invalidBallotsAmount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    uniqueValidBallotsAmount: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.votings_service.TxVotingResults}
 */
proto.votings_service.TxVotingResults.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.votings_service.TxVotingResults;
  return proto.votings_service.TxVotingResults.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.votings_service.TxVotingResults} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.votings_service.TxVotingResults}
 */
proto.votings_service.TxVotingResults.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getDistrictResultsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readMessage, proto.votings_service.TxDistrictResults.deserializeBinaryFromReader, 0, new proto.votings_service.TxDistrictResults());
         });
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInvalidBallotsAmount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUniqueValidBallotsAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.votings_service.TxVotingResults.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.votings_service.TxVotingResults.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.votings_service.TxVotingResults} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.TxVotingResults.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDistrictResultsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeMessage, proto.votings_service.TxDistrictResults.serializeBinaryToWriter);
  }
  f = message.getInvalidBallotsAmount();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getUniqueValidBallotsAmount();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * map<uint32, TxDistrictResults> district_results = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.votings_service.TxDistrictResults>}
 */
proto.votings_service.TxVotingResults.prototype.getDistrictResultsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.votings_service.TxDistrictResults>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.votings_service.TxDistrictResults));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.votings_service.TxVotingResults} returns this
 */
proto.votings_service.TxVotingResults.prototype.clearDistrictResultsMap = function() {
  this.getDistrictResultsMap().clear();
  return this;
};


/**
 * optional uint32 invalid_ballots_amount = 2;
 * @return {number}
 */
proto.votings_service.TxVotingResults.prototype.getInvalidBallotsAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.votings_service.TxVotingResults} returns this
 */
proto.votings_service.TxVotingResults.prototype.setInvalidBallotsAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 unique_valid_ballots_amount = 3;
 * @return {number}
 */
proto.votings_service.TxVotingResults.prototype.getUniqueValidBallotsAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.votings_service.TxVotingResults} returns this
 */
proto.votings_service.TxVotingResults.prototype.setUniqueValidBallotsAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.votings_service.TxBallotConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.votings_service.TxBallotConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.votings_service.TxBallotConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.TxBallotConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    districtId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    question: jspb.Message.getFieldWithDefault(msg, 2, ""),
    optionsMap: (f = msg.getOptionsMap()) ? f.toObject(includeInstance, undefined) : [],
    minChoices: jspb.Message.getFieldWithDefault(msg, 4, 0),
    maxChoices: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.votings_service.TxBallotConfig}
 */
proto.votings_service.TxBallotConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.votings_service.TxBallotConfig;
  return proto.votings_service.TxBallotConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.votings_service.TxBallotConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.votings_service.TxBallotConfig}
 */
proto.votings_service.TxBallotConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDistrictId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuestion(value);
      break;
    case 3:
      var value = msg.getOptionsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readString, null, 0, "");
         });
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinChoices(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxChoices(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.votings_service.TxBallotConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.votings_service.TxBallotConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.votings_service.TxBallotConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.TxBallotConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDistrictId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getQuestion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOptionsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getMinChoices();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getMaxChoices();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional uint32 district_id = 1;
 * @return {number}
 */
proto.votings_service.TxBallotConfig.prototype.getDistrictId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.votings_service.TxBallotConfig} returns this
 */
proto.votings_service.TxBallotConfig.prototype.setDistrictId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string question = 2;
 * @return {string}
 */
proto.votings_service.TxBallotConfig.prototype.getQuestion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.votings_service.TxBallotConfig} returns this
 */
proto.votings_service.TxBallotConfig.prototype.setQuestion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * map<uint32, string> options = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,string>}
 */
proto.votings_service.TxBallotConfig.prototype.getOptionsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.votings_service.TxBallotConfig} returns this
 */
proto.votings_service.TxBallotConfig.prototype.clearOptionsMap = function() {
  this.getOptionsMap().clear();
  return this;
};


/**
 * optional uint32 min_choices = 4;
 * @return {number}
 */
proto.votings_service.TxBallotConfig.prototype.getMinChoices = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.votings_service.TxBallotConfig} returns this
 */
proto.votings_service.TxBallotConfig.prototype.setMinChoices = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 max_choices = 5;
 * @return {number}
 */
proto.votings_service.TxBallotConfig.prototype.getMaxChoices = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.votings_service.TxBallotConfig} returns this
 */
proto.votings_service.TxBallotConfig.prototype.setMaxChoices = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.votings_service.TxCreateVoting.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.votings_service.TxCreateVoting.prototype.toObject = function(opt_includeInstance) {
  return proto.votings_service.TxCreateVoting.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.votings_service.TxCreateVoting} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.TxCreateVoting.toObject = function(includeInstance, msg) {
  var f, obj = {
    cryptoSystem: (f = msg.getCryptoSystem()) && proto.votings_service.TxCryptoSystemSettings.toObject(includeInstance, f),
    ballotsConfigList: jspb.Message.toObjectList(msg.getBallotsConfigList(),
    proto.votings_service.TxBallotConfig.toObject, includeInstance),
    revoteEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.votings_service.TxCreateVoting}
 */
proto.votings_service.TxCreateVoting.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.votings_service.TxCreateVoting;
  return proto.votings_service.TxCreateVoting.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.votings_service.TxCreateVoting} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.votings_service.TxCreateVoting}
 */
proto.votings_service.TxCreateVoting.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.votings_service.TxCryptoSystemSettings;
      reader.readMessage(value,proto.votings_service.TxCryptoSystemSettings.deserializeBinaryFromReader);
      msg.setCryptoSystem(value);
      break;
    case 2:
      var value = new proto.votings_service.TxBallotConfig;
      reader.readMessage(value,proto.votings_service.TxBallotConfig.deserializeBinaryFromReader);
      msg.addBallotsConfig(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRevoteEnabled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.votings_service.TxCreateVoting.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.votings_service.TxCreateVoting.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.votings_service.TxCreateVoting} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.TxCreateVoting.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCryptoSystem();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.votings_service.TxCryptoSystemSettings.serializeBinaryToWriter
    );
  }
  f = message.getBallotsConfigList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.votings_service.TxBallotConfig.serializeBinaryToWriter
    );
  }
  f = message.getRevoteEnabled();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional TxCryptoSystemSettings crypto_system = 1;
 * @return {?proto.votings_service.TxCryptoSystemSettings}
 */
proto.votings_service.TxCreateVoting.prototype.getCryptoSystem = function() {
  return /** @type{?proto.votings_service.TxCryptoSystemSettings} */ (
    jspb.Message.getWrapperField(this, proto.votings_service.TxCryptoSystemSettings, 1));
};


/**
 * @param {?proto.votings_service.TxCryptoSystemSettings|undefined} value
 * @return {!proto.votings_service.TxCreateVoting} returns this
*/
proto.votings_service.TxCreateVoting.prototype.setCryptoSystem = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.votings_service.TxCreateVoting} returns this
 */
proto.votings_service.TxCreateVoting.prototype.clearCryptoSystem = function() {
  return this.setCryptoSystem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.votings_service.TxCreateVoting.prototype.hasCryptoSystem = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated TxBallotConfig ballots_config = 2;
 * @return {!Array<!proto.votings_service.TxBallotConfig>}
 */
proto.votings_service.TxCreateVoting.prototype.getBallotsConfigList = function() {
  return /** @type{!Array<!proto.votings_service.TxBallotConfig>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.votings_service.TxBallotConfig, 2));
};


/**
 * @param {!Array<!proto.votings_service.TxBallotConfig>} value
 * @return {!proto.votings_service.TxCreateVoting} returns this
*/
proto.votings_service.TxCreateVoting.prototype.setBallotsConfigList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.votings_service.TxBallotConfig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.votings_service.TxBallotConfig}
 */
proto.votings_service.TxCreateVoting.prototype.addBallotsConfig = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.votings_service.TxBallotConfig, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.votings_service.TxCreateVoting} returns this
 */
proto.votings_service.TxCreateVoting.prototype.clearBallotsConfigList = function() {
  return this.setBallotsConfigList([]);
};


/**
 * optional bool revote_enabled = 3;
 * @return {boolean}
 */
proto.votings_service.TxCreateVoting.prototype.getRevoteEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.votings_service.TxCreateVoting} returns this
 */
proto.votings_service.TxCreateVoting.prototype.setRevoteEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.votings_service.TxRegisterVoters.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.votings_service.TxRegisterVoters.prototype.toObject = function(opt_includeInstance) {
  return proto.votings_service.TxRegisterVoters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.votings_service.TxRegisterVoters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.TxRegisterVoters.toObject = function(includeInstance, msg) {
  var f, obj = {
    votingId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    votersList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.votings_service.TxRegisterVoters}
 */
proto.votings_service.TxRegisterVoters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.votings_service.TxRegisterVoters;
  return proto.votings_service.TxRegisterVoters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.votings_service.TxRegisterVoters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.votings_service.TxRegisterVoters}
 */
proto.votings_service.TxRegisterVoters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVotingId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addVoters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.votings_service.TxRegisterVoters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.votings_service.TxRegisterVoters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.votings_service.TxRegisterVoters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.TxRegisterVoters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVotingId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVotersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string voting_id = 1;
 * @return {string}
 */
proto.votings_service.TxRegisterVoters.prototype.getVotingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.votings_service.TxRegisterVoters} returns this
 */
proto.votings_service.TxRegisterVoters.prototype.setVotingId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string voters = 2;
 * @return {!Array<string>}
 */
proto.votings_service.TxRegisterVoters.prototype.getVotersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.votings_service.TxRegisterVoters} returns this
 */
proto.votings_service.TxRegisterVoters.prototype.setVotersList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.votings_service.TxRegisterVoters} returns this
 */
proto.votings_service.TxRegisterVoters.prototype.addVoters = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.votings_service.TxRegisterVoters} returns this
 */
proto.votings_service.TxRegisterVoters.prototype.clearVotersList = function() {
  return this.setVotersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.votings_service.TxStopRegistration.prototype.toObject = function(opt_includeInstance) {
  return proto.votings_service.TxStopRegistration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.votings_service.TxStopRegistration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.TxStopRegistration.toObject = function(includeInstance, msg) {
  var f, obj = {
    votingId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    seed: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.votings_service.TxStopRegistration}
 */
proto.votings_service.TxStopRegistration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.votings_service.TxStopRegistration;
  return proto.votings_service.TxStopRegistration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.votings_service.TxStopRegistration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.votings_service.TxStopRegistration}
 */
proto.votings_service.TxStopRegistration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVotingId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.votings_service.TxStopRegistration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.votings_service.TxStopRegistration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.votings_service.TxStopRegistration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.TxStopRegistration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVotingId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSeed();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional string voting_id = 1;
 * @return {string}
 */
proto.votings_service.TxStopRegistration.prototype.getVotingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.votings_service.TxStopRegistration} returns this
 */
proto.votings_service.TxStopRegistration.prototype.setVotingId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 seed = 2;
 * @return {number}
 */
proto.votings_service.TxStopRegistration.prototype.getSeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.votings_service.TxStopRegistration} returns this
 */
proto.votings_service.TxStopRegistration.prototype.setSeed = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.votings_service.TxRevokeVoterParticipation.prototype.toObject = function(opt_includeInstance) {
  return proto.votings_service.TxRevokeVoterParticipation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.votings_service.TxRevokeVoterParticipation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.TxRevokeVoterParticipation.toObject = function(includeInstance, msg) {
  var f, obj = {
    votingId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    voterId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    seed: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.votings_service.TxRevokeVoterParticipation}
 */
proto.votings_service.TxRevokeVoterParticipation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.votings_service.TxRevokeVoterParticipation;
  return proto.votings_service.TxRevokeVoterParticipation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.votings_service.TxRevokeVoterParticipation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.votings_service.TxRevokeVoterParticipation}
 */
proto.votings_service.TxRevokeVoterParticipation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVotingId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVoterId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.votings_service.TxRevokeVoterParticipation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.votings_service.TxRevokeVoterParticipation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.votings_service.TxRevokeVoterParticipation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.TxRevokeVoterParticipation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVotingId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVoterId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSeed();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional string voting_id = 1;
 * @return {string}
 */
proto.votings_service.TxRevokeVoterParticipation.prototype.getVotingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.votings_service.TxRevokeVoterParticipation} returns this
 */
proto.votings_service.TxRevokeVoterParticipation.prototype.setVotingId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string voter_id = 2;
 * @return {string}
 */
proto.votings_service.TxRevokeVoterParticipation.prototype.getVoterId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.votings_service.TxRevokeVoterParticipation} returns this
 */
proto.votings_service.TxRevokeVoterParticipation.prototype.setVoterId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 seed = 3;
 * @return {number}
 */
proto.votings_service.TxRevokeVoterParticipation.prototype.getSeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.votings_service.TxRevokeVoterParticipation} returns this
 */
proto.votings_service.TxRevokeVoterParticipation.prototype.setSeed = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.votings_service.TxIssueBallot.prototype.toObject = function(opt_includeInstance) {
  return proto.votings_service.TxIssueBallot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.votings_service.TxIssueBallot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.TxIssueBallot.toObject = function(includeInstance, msg) {
  var f, obj = {
    votingId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    voterId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    districtId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    seed: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.votings_service.TxIssueBallot}
 */
proto.votings_service.TxIssueBallot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.votings_service.TxIssueBallot;
  return proto.votings_service.TxIssueBallot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.votings_service.TxIssueBallot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.votings_service.TxIssueBallot}
 */
proto.votings_service.TxIssueBallot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVotingId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVoterId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDistrictId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.votings_service.TxIssueBallot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.votings_service.TxIssueBallot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.votings_service.TxIssueBallot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.TxIssueBallot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVotingId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVoterId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDistrictId();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getSeed();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional string voting_id = 1;
 * @return {string}
 */
proto.votings_service.TxIssueBallot.prototype.getVotingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.votings_service.TxIssueBallot} returns this
 */
proto.votings_service.TxIssueBallot.prototype.setVotingId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string voter_id = 2;
 * @return {string}
 */
proto.votings_service.TxIssueBallot.prototype.getVoterId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.votings_service.TxIssueBallot} returns this
 */
proto.votings_service.TxIssueBallot.prototype.setVoterId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 district_id = 3;
 * @return {number}
 */
proto.votings_service.TxIssueBallot.prototype.getDistrictId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.votings_service.TxIssueBallot} returns this
 */
proto.votings_service.TxIssueBallot.prototype.setDistrictId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 seed = 4;
 * @return {number}
 */
proto.votings_service.TxIssueBallot.prototype.getSeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.votings_service.TxIssueBallot} returns this
 */
proto.votings_service.TxIssueBallot.prototype.setSeed = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.votings_service.TxAddVoterKey.prototype.toObject = function(opt_includeInstance) {
  return proto.votings_service.TxAddVoterKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.votings_service.TxAddVoterKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.TxAddVoterKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    votingId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    voterKey: (f = msg.getVoterKey()) && exonum_crypto_types_pb.PublicKey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.votings_service.TxAddVoterKey}
 */
proto.votings_service.TxAddVoterKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.votings_service.TxAddVoterKey;
  return proto.votings_service.TxAddVoterKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.votings_service.TxAddVoterKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.votings_service.TxAddVoterKey}
 */
proto.votings_service.TxAddVoterKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVotingId(value);
      break;
    case 2:
      var value = new exonum_crypto_types_pb.PublicKey;
      reader.readMessage(value,exonum_crypto_types_pb.PublicKey.deserializeBinaryFromReader);
      msg.setVoterKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.votings_service.TxAddVoterKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.votings_service.TxAddVoterKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.votings_service.TxAddVoterKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.TxAddVoterKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVotingId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVoterKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      exonum_crypto_types_pb.PublicKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional string voting_id = 1;
 * @return {string}
 */
proto.votings_service.TxAddVoterKey.prototype.getVotingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.votings_service.TxAddVoterKey} returns this
 */
proto.votings_service.TxAddVoterKey.prototype.setVotingId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional exonum.crypto.PublicKey voter_key = 2;
 * @return {?proto.exonum.crypto.PublicKey}
 */
proto.votings_service.TxAddVoterKey.prototype.getVoterKey = function() {
  return /** @type{?proto.exonum.crypto.PublicKey} */ (
    jspb.Message.getWrapperField(this, exonum_crypto_types_pb.PublicKey, 2));
};


/**
 * @param {?proto.exonum.crypto.PublicKey|undefined} value
 * @return {!proto.votings_service.TxAddVoterKey} returns this
*/
proto.votings_service.TxAddVoterKey.prototype.setVoterKey = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.votings_service.TxAddVoterKey} returns this
 */
proto.votings_service.TxAddVoterKey.prototype.clearVoterKey = function() {
  return this.setVoterKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.votings_service.TxAddVoterKey.prototype.hasVoterKey = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.votings_service.TxEncryptedChoice.prototype.toObject = function(opt_includeInstance) {
  return proto.votings_service.TxEncryptedChoice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.votings_service.TxEncryptedChoice} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.TxEncryptedChoice.toObject = function(includeInstance, msg) {
  var f, obj = {
    encryptedMessage: msg.getEncryptedMessage_asB64(),
    nonce: (f = msg.getNonce()) && custom_types_pb.SealedBoxNonce.toObject(includeInstance, f),
    publicKey: (f = msg.getPublicKey()) && custom_types_pb.SealedBoxPublicKey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.votings_service.TxEncryptedChoice}
 */
proto.votings_service.TxEncryptedChoice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.votings_service.TxEncryptedChoice;
  return proto.votings_service.TxEncryptedChoice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.votings_service.TxEncryptedChoice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.votings_service.TxEncryptedChoice}
 */
proto.votings_service.TxEncryptedChoice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEncryptedMessage(value);
      break;
    case 2:
      var value = new custom_types_pb.SealedBoxNonce;
      reader.readMessage(value,custom_types_pb.SealedBoxNonce.deserializeBinaryFromReader);
      msg.setNonce(value);
      break;
    case 3:
      var value = new custom_types_pb.SealedBoxPublicKey;
      reader.readMessage(value,custom_types_pb.SealedBoxPublicKey.deserializeBinaryFromReader);
      msg.setPublicKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.votings_service.TxEncryptedChoice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.votings_service.TxEncryptedChoice.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.votings_service.TxEncryptedChoice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.TxEncryptedChoice.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEncryptedMessage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getNonce();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      custom_types_pb.SealedBoxNonce.serializeBinaryToWriter
    );
  }
  f = message.getPublicKey();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      custom_types_pb.SealedBoxPublicKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes encrypted_message = 1;
 * @return {!(string|Uint8Array)}
 */
proto.votings_service.TxEncryptedChoice.prototype.getEncryptedMessage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes encrypted_message = 1;
 * This is a type-conversion wrapper around `getEncryptedMessage()`
 * @return {string}
 */
proto.votings_service.TxEncryptedChoice.prototype.getEncryptedMessage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEncryptedMessage()));
};


/**
 * optional bytes encrypted_message = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEncryptedMessage()`
 * @return {!Uint8Array}
 */
proto.votings_service.TxEncryptedChoice.prototype.getEncryptedMessage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEncryptedMessage()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.votings_service.TxEncryptedChoice} returns this
 */
proto.votings_service.TxEncryptedChoice.prototype.setEncryptedMessage = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional SealedBoxNonce nonce = 2;
 * @return {?proto.votings_service.SealedBoxNonce}
 */
proto.votings_service.TxEncryptedChoice.prototype.getNonce = function() {
  return /** @type{?proto.votings_service.SealedBoxNonce} */ (
    jspb.Message.getWrapperField(this, custom_types_pb.SealedBoxNonce, 2));
};


/**
 * @param {?proto.votings_service.SealedBoxNonce|undefined} value
 * @return {!proto.votings_service.TxEncryptedChoice} returns this
*/
proto.votings_service.TxEncryptedChoice.prototype.setNonce = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.votings_service.TxEncryptedChoice} returns this
 */
proto.votings_service.TxEncryptedChoice.prototype.clearNonce = function() {
  return this.setNonce(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.votings_service.TxEncryptedChoice.prototype.hasNonce = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SealedBoxPublicKey public_key = 3;
 * @return {?proto.votings_service.SealedBoxPublicKey}
 */
proto.votings_service.TxEncryptedChoice.prototype.getPublicKey = function() {
  return /** @type{?proto.votings_service.SealedBoxPublicKey} */ (
    jspb.Message.getWrapperField(this, custom_types_pb.SealedBoxPublicKey, 3));
};


/**
 * @param {?proto.votings_service.SealedBoxPublicKey|undefined} value
 * @return {!proto.votings_service.TxEncryptedChoice} returns this
*/
proto.votings_service.TxEncryptedChoice.prototype.setPublicKey = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.votings_service.TxEncryptedChoice} returns this
 */
proto.votings_service.TxEncryptedChoice.prototype.clearPublicKey = function() {
  return this.setPublicKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.votings_service.TxEncryptedChoice.prototype.hasPublicKey = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.votings_service.TxStoreBallot.prototype.toObject = function(opt_includeInstance) {
  return proto.votings_service.TxStoreBallot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.votings_service.TxStoreBallot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.TxStoreBallot.toObject = function(includeInstance, msg) {
  var f, obj = {
    votingId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    districtId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    encryptedChoice: (f = msg.getEncryptedChoice()) && proto.votings_service.TxEncryptedChoice.toObject(includeInstance, f),
    sid: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.votings_service.TxStoreBallot}
 */
proto.votings_service.TxStoreBallot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.votings_service.TxStoreBallot;
  return proto.votings_service.TxStoreBallot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.votings_service.TxStoreBallot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.votings_service.TxStoreBallot}
 */
proto.votings_service.TxStoreBallot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVotingId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDistrictId(value);
      break;
    case 3:
      var value = new proto.votings_service.TxEncryptedChoice;
      reader.readMessage(value,proto.votings_service.TxEncryptedChoice.deserializeBinaryFromReader);
      msg.setEncryptedChoice(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.votings_service.TxStoreBallot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.votings_service.TxStoreBallot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.votings_service.TxStoreBallot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.TxStoreBallot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVotingId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDistrictId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getEncryptedChoice();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.votings_service.TxEncryptedChoice.serializeBinaryToWriter
    );
  }
  f = message.getSid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string voting_id = 1;
 * @return {string}
 */
proto.votings_service.TxStoreBallot.prototype.getVotingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.votings_service.TxStoreBallot} returns this
 */
proto.votings_service.TxStoreBallot.prototype.setVotingId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 district_id = 2;
 * @return {number}
 */
proto.votings_service.TxStoreBallot.prototype.getDistrictId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.votings_service.TxStoreBallot} returns this
 */
proto.votings_service.TxStoreBallot.prototype.setDistrictId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional TxEncryptedChoice encrypted_choice = 3;
 * @return {?proto.votings_service.TxEncryptedChoice}
 */
proto.votings_service.TxStoreBallot.prototype.getEncryptedChoice = function() {
  return /** @type{?proto.votings_service.TxEncryptedChoice} */ (
    jspb.Message.getWrapperField(this, proto.votings_service.TxEncryptedChoice, 3));
};


/**
 * @param {?proto.votings_service.TxEncryptedChoice|undefined} value
 * @return {!proto.votings_service.TxStoreBallot} returns this
*/
proto.votings_service.TxStoreBallot.prototype.setEncryptedChoice = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.votings_service.TxStoreBallot} returns this
 */
proto.votings_service.TxStoreBallot.prototype.clearEncryptedChoice = function() {
  return this.setEncryptedChoice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.votings_service.TxStoreBallot.prototype.hasEncryptedChoice = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string sid = 4;
 * @return {string}
 */
proto.votings_service.TxStoreBallot.prototype.getSid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.votings_service.TxStoreBallot} returns this
 */
proto.votings_service.TxStoreBallot.prototype.setSid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.votings_service.TxStopVoting.prototype.toObject = function(opt_includeInstance) {
  return proto.votings_service.TxStopVoting.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.votings_service.TxStopVoting} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.TxStopVoting.toObject = function(includeInstance, msg) {
  var f, obj = {
    votingId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    seed: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.votings_service.TxStopVoting}
 */
proto.votings_service.TxStopVoting.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.votings_service.TxStopVoting;
  return proto.votings_service.TxStopVoting.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.votings_service.TxStopVoting} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.votings_service.TxStopVoting}
 */
proto.votings_service.TxStopVoting.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVotingId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.votings_service.TxStopVoting.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.votings_service.TxStopVoting.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.votings_service.TxStopVoting} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.TxStopVoting.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVotingId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSeed();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional string voting_id = 1;
 * @return {string}
 */
proto.votings_service.TxStopVoting.prototype.getVotingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.votings_service.TxStopVoting} returns this
 */
proto.votings_service.TxStopVoting.prototype.setVotingId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 seed = 2;
 * @return {number}
 */
proto.votings_service.TxStopVoting.prototype.getSeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.votings_service.TxStopVoting} returns this
 */
proto.votings_service.TxStopVoting.prototype.setSeed = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.votings_service.TxPublishDecryptionKey.prototype.toObject = function(opt_includeInstance) {
  return proto.votings_service.TxPublishDecryptionKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.votings_service.TxPublishDecryptionKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.TxPublishDecryptionKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    votingId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    privateKey: (f = msg.getPrivateKey()) && custom_types_pb.SealedBoxSecretKey.toObject(includeInstance, f),
    seed: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.votings_service.TxPublishDecryptionKey}
 */
proto.votings_service.TxPublishDecryptionKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.votings_service.TxPublishDecryptionKey;
  return proto.votings_service.TxPublishDecryptionKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.votings_service.TxPublishDecryptionKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.votings_service.TxPublishDecryptionKey}
 */
proto.votings_service.TxPublishDecryptionKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVotingId(value);
      break;
    case 2:
      var value = new custom_types_pb.SealedBoxSecretKey;
      reader.readMessage(value,custom_types_pb.SealedBoxSecretKey.deserializeBinaryFromReader);
      msg.setPrivateKey(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.votings_service.TxPublishDecryptionKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.votings_service.TxPublishDecryptionKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.votings_service.TxPublishDecryptionKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.TxPublishDecryptionKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVotingId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPrivateKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      custom_types_pb.SealedBoxSecretKey.serializeBinaryToWriter
    );
  }
  f = message.getSeed();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional string voting_id = 1;
 * @return {string}
 */
proto.votings_service.TxPublishDecryptionKey.prototype.getVotingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.votings_service.TxPublishDecryptionKey} returns this
 */
proto.votings_service.TxPublishDecryptionKey.prototype.setVotingId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional SealedBoxSecretKey private_key = 2;
 * @return {?proto.votings_service.SealedBoxSecretKey}
 */
proto.votings_service.TxPublishDecryptionKey.prototype.getPrivateKey = function() {
  return /** @type{?proto.votings_service.SealedBoxSecretKey} */ (
    jspb.Message.getWrapperField(this, custom_types_pb.SealedBoxSecretKey, 2));
};


/**
 * @param {?proto.votings_service.SealedBoxSecretKey|undefined} value
 * @return {!proto.votings_service.TxPublishDecryptionKey} returns this
*/
proto.votings_service.TxPublishDecryptionKey.prototype.setPrivateKey = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.votings_service.TxPublishDecryptionKey} returns this
 */
proto.votings_service.TxPublishDecryptionKey.prototype.clearPrivateKey = function() {
  return this.setPrivateKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.votings_service.TxPublishDecryptionKey.prototype.hasPrivateKey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 seed = 3;
 * @return {number}
 */
proto.votings_service.TxPublishDecryptionKey.prototype.getSeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.votings_service.TxPublishDecryptionKey} returns this
 */
proto.votings_service.TxPublishDecryptionKey.prototype.setSeed = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.votings_service.TxDecryptBallot.prototype.toObject = function(opt_includeInstance) {
  return proto.votings_service.TxDecryptBallot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.votings_service.TxDecryptBallot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.TxDecryptBallot.toObject = function(includeInstance, msg) {
  var f, obj = {
    votingId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ballotIndex: jspb.Message.getFieldWithDefault(msg, 2, 0),
    seed: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.votings_service.TxDecryptBallot}
 */
proto.votings_service.TxDecryptBallot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.votings_service.TxDecryptBallot;
  return proto.votings_service.TxDecryptBallot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.votings_service.TxDecryptBallot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.votings_service.TxDecryptBallot}
 */
proto.votings_service.TxDecryptBallot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVotingId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBallotIndex(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.votings_service.TxDecryptBallot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.votings_service.TxDecryptBallot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.votings_service.TxDecryptBallot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.TxDecryptBallot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVotingId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBallotIndex();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getSeed();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional string voting_id = 1;
 * @return {string}
 */
proto.votings_service.TxDecryptBallot.prototype.getVotingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.votings_service.TxDecryptBallot} returns this
 */
proto.votings_service.TxDecryptBallot.prototype.setVotingId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 ballot_index = 2;
 * @return {number}
 */
proto.votings_service.TxDecryptBallot.prototype.getBallotIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.votings_service.TxDecryptBallot} returns this
 */
proto.votings_service.TxDecryptBallot.prototype.setBallotIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 seed = 3;
 * @return {number}
 */
proto.votings_service.TxDecryptBallot.prototype.getSeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.votings_service.TxDecryptBallot} returns this
 */
proto.votings_service.TxDecryptBallot.prototype.setSeed = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.votings_service.TxPublishDecryptedBallot.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.votings_service.TxPublishDecryptedBallot.prototype.toObject = function(opt_includeInstance) {
  return proto.votings_service.TxPublishDecryptedBallot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.votings_service.TxPublishDecryptedBallot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.TxPublishDecryptedBallot.toObject = function(includeInstance, msg) {
  var f, obj = {
    votingId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ballotIndex: jspb.Message.getFieldWithDefault(msg, 2, 0),
    isInvalid: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    decryptedChoicesList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    seed: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.votings_service.TxPublishDecryptedBallot}
 */
proto.votings_service.TxPublishDecryptedBallot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.votings_service.TxPublishDecryptedBallot;
  return proto.votings_service.TxPublishDecryptedBallot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.votings_service.TxPublishDecryptedBallot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.votings_service.TxPublishDecryptedBallot}
 */
proto.votings_service.TxPublishDecryptedBallot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVotingId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBallotIndex(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsInvalid(value);
      break;
    case 4:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addDecryptedChoices(values[i]);
      }
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.votings_service.TxPublishDecryptedBallot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.votings_service.TxPublishDecryptedBallot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.votings_service.TxPublishDecryptedBallot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.TxPublishDecryptedBallot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVotingId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBallotIndex();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getIsInvalid();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getDecryptedChoicesList();
  if (f.length > 0) {
    writer.writePackedUint32(
      4,
      f
    );
  }
  f = message.getSeed();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional string voting_id = 1;
 * @return {string}
 */
proto.votings_service.TxPublishDecryptedBallot.prototype.getVotingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.votings_service.TxPublishDecryptedBallot} returns this
 */
proto.votings_service.TxPublishDecryptedBallot.prototype.setVotingId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 ballot_index = 2;
 * @return {number}
 */
proto.votings_service.TxPublishDecryptedBallot.prototype.getBallotIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.votings_service.TxPublishDecryptedBallot} returns this
 */
proto.votings_service.TxPublishDecryptedBallot.prototype.setBallotIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool is_invalid = 3;
 * @return {boolean}
 */
proto.votings_service.TxPublishDecryptedBallot.prototype.getIsInvalid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.votings_service.TxPublishDecryptedBallot} returns this
 */
proto.votings_service.TxPublishDecryptedBallot.prototype.setIsInvalid = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * repeated uint32 decrypted_choices = 4;
 * @return {!Array<number>}
 */
proto.votings_service.TxPublishDecryptedBallot.prototype.getDecryptedChoicesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.votings_service.TxPublishDecryptedBallot} returns this
 */
proto.votings_service.TxPublishDecryptedBallot.prototype.setDecryptedChoicesList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.votings_service.TxPublishDecryptedBallot} returns this
 */
proto.votings_service.TxPublishDecryptedBallot.prototype.addDecryptedChoices = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.votings_service.TxPublishDecryptedBallot} returns this
 */
proto.votings_service.TxPublishDecryptedBallot.prototype.clearDecryptedChoicesList = function() {
  return this.setDecryptedChoicesList([]);
};


/**
 * optional uint64 seed = 5;
 * @return {number}
 */
proto.votings_service.TxPublishDecryptedBallot.prototype.getSeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.votings_service.TxPublishDecryptedBallot} returns this
 */
proto.votings_service.TxPublishDecryptedBallot.prototype.setSeed = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.votings_service.TxFinalizeVoting.prototype.toObject = function(opt_includeInstance) {
  return proto.votings_service.TxFinalizeVoting.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.votings_service.TxFinalizeVoting} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.TxFinalizeVoting.toObject = function(includeInstance, msg) {
  var f, obj = {
    votingId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    seed: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.votings_service.TxFinalizeVoting}
 */
proto.votings_service.TxFinalizeVoting.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.votings_service.TxFinalizeVoting;
  return proto.votings_service.TxFinalizeVoting.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.votings_service.TxFinalizeVoting} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.votings_service.TxFinalizeVoting}
 */
proto.votings_service.TxFinalizeVoting.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVotingId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.votings_service.TxFinalizeVoting.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.votings_service.TxFinalizeVoting.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.votings_service.TxFinalizeVoting} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.TxFinalizeVoting.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVotingId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSeed();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional string voting_id = 1;
 * @return {string}
 */
proto.votings_service.TxFinalizeVoting.prototype.getVotingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.votings_service.TxFinalizeVoting} returns this
 */
proto.votings_service.TxFinalizeVoting.prototype.setVotingId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 seed = 2;
 * @return {number}
 */
proto.votings_service.TxFinalizeVoting.prototype.getSeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.votings_service.TxFinalizeVoting} returns this
 */
proto.votings_service.TxFinalizeVoting.prototype.setSeed = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.votings_service.TxFinalizeVotingWithResults.prototype.toObject = function(opt_includeInstance) {
  return proto.votings_service.TxFinalizeVotingWithResults.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.votings_service.TxFinalizeVotingWithResults} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.TxFinalizeVotingWithResults.toObject = function(includeInstance, msg) {
  var f, obj = {
    votingId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    seed: jspb.Message.getFieldWithDefault(msg, 2, 0),
    results: (f = msg.getResults()) && proto.votings_service.TxVotingResults.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.votings_service.TxFinalizeVotingWithResults}
 */
proto.votings_service.TxFinalizeVotingWithResults.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.votings_service.TxFinalizeVotingWithResults;
  return proto.votings_service.TxFinalizeVotingWithResults.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.votings_service.TxFinalizeVotingWithResults} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.votings_service.TxFinalizeVotingWithResults}
 */
proto.votings_service.TxFinalizeVotingWithResults.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVotingId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSeed(value);
      break;
    case 3:
      var value = new proto.votings_service.TxVotingResults;
      reader.readMessage(value,proto.votings_service.TxVotingResults.deserializeBinaryFromReader);
      msg.setResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.votings_service.TxFinalizeVotingWithResults.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.votings_service.TxFinalizeVotingWithResults.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.votings_service.TxFinalizeVotingWithResults} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.TxFinalizeVotingWithResults.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVotingId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSeed();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getResults();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.votings_service.TxVotingResults.serializeBinaryToWriter
    );
  }
};


/**
 * optional string voting_id = 1;
 * @return {string}
 */
proto.votings_service.TxFinalizeVotingWithResults.prototype.getVotingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.votings_service.TxFinalizeVotingWithResults} returns this
 */
proto.votings_service.TxFinalizeVotingWithResults.prototype.setVotingId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 seed = 2;
 * @return {number}
 */
proto.votings_service.TxFinalizeVotingWithResults.prototype.getSeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.votings_service.TxFinalizeVotingWithResults} returns this
 */
proto.votings_service.TxFinalizeVotingWithResults.prototype.setSeed = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional TxVotingResults results = 3;
 * @return {?proto.votings_service.TxVotingResults}
 */
proto.votings_service.TxFinalizeVotingWithResults.prototype.getResults = function() {
  return /** @type{?proto.votings_service.TxVotingResults} */ (
    jspb.Message.getWrapperField(this, proto.votings_service.TxVotingResults, 3));
};


/**
 * @param {?proto.votings_service.TxVotingResults|undefined} value
 * @return {!proto.votings_service.TxFinalizeVotingWithResults} returns this
*/
proto.votings_service.TxFinalizeVotingWithResults.prototype.setResults = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.votings_service.TxFinalizeVotingWithResults} returns this
 */
proto.votings_service.TxFinalizeVotingWithResults.prototype.clearResults = function() {
  return this.setResults(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.votings_service.TxFinalizeVotingWithResults.prototype.hasResults = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.votings_service);
