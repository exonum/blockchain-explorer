// source: exonum/runtime/lifecycle.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var exonum_blockchain_pb = require('../../exonum/blockchain_pb.js');
goog.object.extend(proto, exonum_blockchain_pb);
var exonum_crypto_types_pb = require('../../exonum/crypto/types_pb.js');
goog.object.extend(proto, exonum_crypto_types_pb);
var exonum_runtime_base_pb = require('../../exonum/runtime/base_pb.js');
goog.object.extend(proto, exonum_runtime_base_pb);
goog.exportSymbol('proto.exonum.runtime.ArtifactState', null, global);
goog.exportSymbol('proto.exonum.runtime.ArtifactState.Status', null, global);
goog.exportSymbol('proto.exonum.runtime.GenesisConfig', null, global);
goog.exportSymbol('proto.exonum.runtime.InstanceInitParams', null, global);
goog.exportSymbol('proto.exonum.runtime.InstanceMigration', null, global);
goog.exportSymbol('proto.exonum.runtime.InstanceState', null, global);
goog.exportSymbol('proto.exonum.runtime.InstanceStatus', null, global);
goog.exportSymbol('proto.exonum.runtime.InstanceStatus.Simple', null, global);
goog.exportSymbol('proto.exonum.runtime.InstanceStatus.StatusCase', null, global);
goog.exportSymbol('proto.exonum.runtime.MigrationStatus', null, global);
goog.exportSymbol('proto.exonum.runtime.MigrationStatus.ResultCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.exonum.runtime.InstanceInitParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.exonum.runtime.InstanceInitParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.exonum.runtime.InstanceInitParams.displayName = 'proto.exonum.runtime.InstanceInitParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.exonum.runtime.GenesisConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.exonum.runtime.GenesisConfig.repeatedFields_, null);
};
goog.inherits(proto.exonum.runtime.GenesisConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.exonum.runtime.GenesisConfig.displayName = 'proto.exonum.runtime.GenesisConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.exonum.runtime.ArtifactState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.exonum.runtime.ArtifactState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.exonum.runtime.ArtifactState.displayName = 'proto.exonum.runtime.ArtifactState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.exonum.runtime.InstanceStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.exonum.runtime.InstanceStatus.oneofGroups_);
};
goog.inherits(proto.exonum.runtime.InstanceStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.exonum.runtime.InstanceStatus.displayName = 'proto.exonum.runtime.InstanceStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.exonum.runtime.InstanceMigration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.exonum.runtime.InstanceMigration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.exonum.runtime.InstanceMigration.displayName = 'proto.exonum.runtime.InstanceMigration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.exonum.runtime.InstanceState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.exonum.runtime.InstanceState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.exonum.runtime.InstanceState.displayName = 'proto.exonum.runtime.InstanceState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.exonum.runtime.MigrationStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.exonum.runtime.MigrationStatus.oneofGroups_);
};
goog.inherits(proto.exonum.runtime.MigrationStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.exonum.runtime.MigrationStatus.displayName = 'proto.exonum.runtime.MigrationStatus';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.exonum.runtime.InstanceInitParams.prototype.toObject = function(opt_includeInstance) {
  return proto.exonum.runtime.InstanceInitParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.exonum.runtime.InstanceInitParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exonum.runtime.InstanceInitParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    instanceSpec: (f = msg.getInstanceSpec()) && exonum_runtime_base_pb.InstanceSpec.toObject(includeInstance, f),
    constructor: msg.getConstructor_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.exonum.runtime.InstanceInitParams}
 */
proto.exonum.runtime.InstanceInitParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.exonum.runtime.InstanceInitParams;
  return proto.exonum.runtime.InstanceInitParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.exonum.runtime.InstanceInitParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.exonum.runtime.InstanceInitParams}
 */
proto.exonum.runtime.InstanceInitParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new exonum_runtime_base_pb.InstanceSpec;
      reader.readMessage(value,exonum_runtime_base_pb.InstanceSpec.deserializeBinaryFromReader);
      msg.setInstanceSpec(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setConstructor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.exonum.runtime.InstanceInitParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.exonum.runtime.InstanceInitParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.exonum.runtime.InstanceInitParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exonum.runtime.InstanceInitParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstanceSpec();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      exonum_runtime_base_pb.InstanceSpec.serializeBinaryToWriter
    );
  }
  f = message.getConstructor_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional InstanceSpec instance_spec = 1;
 * @return {?proto.exonum.runtime.InstanceSpec}
 */
proto.exonum.runtime.InstanceInitParams.prototype.getInstanceSpec = function() {
  return /** @type{?proto.exonum.runtime.InstanceSpec} */ (
    jspb.Message.getWrapperField(this, exonum_runtime_base_pb.InstanceSpec, 1));
};


/**
 * @param {?proto.exonum.runtime.InstanceSpec|undefined} value
 * @return {!proto.exonum.runtime.InstanceInitParams} returns this
*/
proto.exonum.runtime.InstanceInitParams.prototype.setInstanceSpec = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.exonum.runtime.InstanceInitParams} returns this
 */
proto.exonum.runtime.InstanceInitParams.prototype.clearInstanceSpec = function() {
  return this.setInstanceSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exonum.runtime.InstanceInitParams.prototype.hasInstanceSpec = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes constructor = 2;
 * @return {!(string|Uint8Array)}
 */
proto.exonum.runtime.InstanceInitParams.prototype.getConstructor = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes constructor = 2;
 * This is a type-conversion wrapper around `getConstructor()`
 * @return {string}
 */
proto.exonum.runtime.InstanceInitParams.prototype.getConstructor_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getConstructor()));
};


/**
 * optional bytes constructor = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getConstructor()`
 * @return {!Uint8Array}
 */
proto.exonum.runtime.InstanceInitParams.prototype.getConstructor_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getConstructor()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.exonum.runtime.InstanceInitParams} returns this
 */
proto.exonum.runtime.InstanceInitParams.prototype.setConstructor = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.exonum.runtime.GenesisConfig.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.exonum.runtime.GenesisConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.exonum.runtime.GenesisConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.exonum.runtime.GenesisConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exonum.runtime.GenesisConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    consensusConfig: (f = msg.getConsensusConfig()) && exonum_blockchain_pb.Config.toObject(includeInstance, f),
    artifactsList: jspb.Message.toObjectList(msg.getArtifactsList(),
    exonum_runtime_base_pb.ArtifactSpec.toObject, includeInstance),
    builtinInstancesList: jspb.Message.toObjectList(msg.getBuiltinInstancesList(),
    proto.exonum.runtime.InstanceInitParams.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.exonum.runtime.GenesisConfig}
 */
proto.exonum.runtime.GenesisConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.exonum.runtime.GenesisConfig;
  return proto.exonum.runtime.GenesisConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.exonum.runtime.GenesisConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.exonum.runtime.GenesisConfig}
 */
proto.exonum.runtime.GenesisConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new exonum_blockchain_pb.Config;
      reader.readMessage(value,exonum_blockchain_pb.Config.deserializeBinaryFromReader);
      msg.setConsensusConfig(value);
      break;
    case 2:
      var value = new exonum_runtime_base_pb.ArtifactSpec;
      reader.readMessage(value,exonum_runtime_base_pb.ArtifactSpec.deserializeBinaryFromReader);
      msg.addArtifacts(value);
      break;
    case 3:
      var value = new proto.exonum.runtime.InstanceInitParams;
      reader.readMessage(value,proto.exonum.runtime.InstanceInitParams.deserializeBinaryFromReader);
      msg.addBuiltinInstances(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.exonum.runtime.GenesisConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.exonum.runtime.GenesisConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.exonum.runtime.GenesisConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exonum.runtime.GenesisConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConsensusConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      exonum_blockchain_pb.Config.serializeBinaryToWriter
    );
  }
  f = message.getArtifactsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      exonum_runtime_base_pb.ArtifactSpec.serializeBinaryToWriter
    );
  }
  f = message.getBuiltinInstancesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.exonum.runtime.InstanceInitParams.serializeBinaryToWriter
    );
  }
};


/**
 * optional exonum.Config consensus_config = 1;
 * @return {?proto.exonum.Config}
 */
proto.exonum.runtime.GenesisConfig.prototype.getConsensusConfig = function() {
  return /** @type{?proto.exonum.Config} */ (
    jspb.Message.getWrapperField(this, exonum_blockchain_pb.Config, 1));
};


/**
 * @param {?proto.exonum.Config|undefined} value
 * @return {!proto.exonum.runtime.GenesisConfig} returns this
*/
proto.exonum.runtime.GenesisConfig.prototype.setConsensusConfig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.exonum.runtime.GenesisConfig} returns this
 */
proto.exonum.runtime.GenesisConfig.prototype.clearConsensusConfig = function() {
  return this.setConsensusConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exonum.runtime.GenesisConfig.prototype.hasConsensusConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ArtifactSpec artifacts = 2;
 * @return {!Array<!proto.exonum.runtime.ArtifactSpec>}
 */
proto.exonum.runtime.GenesisConfig.prototype.getArtifactsList = function() {
  return /** @type{!Array<!proto.exonum.runtime.ArtifactSpec>} */ (
    jspb.Message.getRepeatedWrapperField(this, exonum_runtime_base_pb.ArtifactSpec, 2));
};


/**
 * @param {!Array<!proto.exonum.runtime.ArtifactSpec>} value
 * @return {!proto.exonum.runtime.GenesisConfig} returns this
*/
proto.exonum.runtime.GenesisConfig.prototype.setArtifactsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.exonum.runtime.ArtifactSpec=} opt_value
 * @param {number=} opt_index
 * @return {!proto.exonum.runtime.ArtifactSpec}
 */
proto.exonum.runtime.GenesisConfig.prototype.addArtifacts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.exonum.runtime.ArtifactSpec, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.exonum.runtime.GenesisConfig} returns this
 */
proto.exonum.runtime.GenesisConfig.prototype.clearArtifactsList = function() {
  return this.setArtifactsList([]);
};


/**
 * repeated InstanceInitParams builtin_instances = 3;
 * @return {!Array<!proto.exonum.runtime.InstanceInitParams>}
 */
proto.exonum.runtime.GenesisConfig.prototype.getBuiltinInstancesList = function() {
  return /** @type{!Array<!proto.exonum.runtime.InstanceInitParams>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.exonum.runtime.InstanceInitParams, 3));
};


/**
 * @param {!Array<!proto.exonum.runtime.InstanceInitParams>} value
 * @return {!proto.exonum.runtime.GenesisConfig} returns this
*/
proto.exonum.runtime.GenesisConfig.prototype.setBuiltinInstancesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.exonum.runtime.InstanceInitParams=} opt_value
 * @param {number=} opt_index
 * @return {!proto.exonum.runtime.InstanceInitParams}
 */
proto.exonum.runtime.GenesisConfig.prototype.addBuiltinInstances = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.exonum.runtime.InstanceInitParams, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.exonum.runtime.GenesisConfig} returns this
 */
proto.exonum.runtime.GenesisConfig.prototype.clearBuiltinInstancesList = function() {
  return this.setBuiltinInstancesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.exonum.runtime.ArtifactState.prototype.toObject = function(opt_includeInstance) {
  return proto.exonum.runtime.ArtifactState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.exonum.runtime.ArtifactState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exonum.runtime.ArtifactState.toObject = function(includeInstance, msg) {
  var f, obj = {
    deploySpec: msg.getDeploySpec_asB64(),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.exonum.runtime.ArtifactState}
 */
proto.exonum.runtime.ArtifactState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.exonum.runtime.ArtifactState;
  return proto.exonum.runtime.ArtifactState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.exonum.runtime.ArtifactState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.exonum.runtime.ArtifactState}
 */
proto.exonum.runtime.ArtifactState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDeploySpec(value);
      break;
    case 2:
      var value = /** @type {!proto.exonum.runtime.ArtifactState.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.exonum.runtime.ArtifactState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.exonum.runtime.ArtifactState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.exonum.runtime.ArtifactState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exonum.runtime.ArtifactState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeploySpec_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.exonum.runtime.ArtifactState.Status = {
  UNLOADING: 0,
  DEPLOYING: 1,
  ACTIVE: 2
};

/**
 * optional bytes deploy_spec = 1;
 * @return {!(string|Uint8Array)}
 */
proto.exonum.runtime.ArtifactState.prototype.getDeploySpec = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes deploy_spec = 1;
 * This is a type-conversion wrapper around `getDeploySpec()`
 * @return {string}
 */
proto.exonum.runtime.ArtifactState.prototype.getDeploySpec_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDeploySpec()));
};


/**
 * optional bytes deploy_spec = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDeploySpec()`
 * @return {!Uint8Array}
 */
proto.exonum.runtime.ArtifactState.prototype.getDeploySpec_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDeploySpec()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.exonum.runtime.ArtifactState} returns this
 */
proto.exonum.runtime.ArtifactState.prototype.setDeploySpec = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Status status = 2;
 * @return {!proto.exonum.runtime.ArtifactState.Status}
 */
proto.exonum.runtime.ArtifactState.prototype.getStatus = function() {
  return /** @type {!proto.exonum.runtime.ArtifactState.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.exonum.runtime.ArtifactState.Status} value
 * @return {!proto.exonum.runtime.ArtifactState} returns this
 */
proto.exonum.runtime.ArtifactState.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.exonum.runtime.InstanceStatus.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.exonum.runtime.InstanceStatus.StatusCase = {
  STATUS_NOT_SET: 0,
  SIMPLE: 1,
  MIGRATION: 2
};

/**
 * @return {proto.exonum.runtime.InstanceStatus.StatusCase}
 */
proto.exonum.runtime.InstanceStatus.prototype.getStatusCase = function() {
  return /** @type {proto.exonum.runtime.InstanceStatus.StatusCase} */(jspb.Message.computeOneofCase(this, proto.exonum.runtime.InstanceStatus.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.exonum.runtime.InstanceStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.exonum.runtime.InstanceStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.exonum.runtime.InstanceStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exonum.runtime.InstanceStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    simple: jspb.Message.getFieldWithDefault(msg, 1, 0),
    migration: (f = msg.getMigration()) && proto.exonum.runtime.InstanceMigration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.exonum.runtime.InstanceStatus}
 */
proto.exonum.runtime.InstanceStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.exonum.runtime.InstanceStatus;
  return proto.exonum.runtime.InstanceStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.exonum.runtime.InstanceStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.exonum.runtime.InstanceStatus}
 */
proto.exonum.runtime.InstanceStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.exonum.runtime.InstanceStatus.Simple} */ (reader.readEnum());
      msg.setSimple(value);
      break;
    case 2:
      var value = new proto.exonum.runtime.InstanceMigration;
      reader.readMessage(value,proto.exonum.runtime.InstanceMigration.deserializeBinaryFromReader);
      msg.setMigration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.exonum.runtime.InstanceStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.exonum.runtime.InstanceStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.exonum.runtime.InstanceStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exonum.runtime.InstanceStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.exonum.runtime.InstanceStatus.Simple} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMigration();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.exonum.runtime.InstanceMigration.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.exonum.runtime.InstanceStatus.Simple = {
  NONE: 0,
  ACTIVE: 1,
  STOPPED: 2,
  FROZEN: 3
};

/**
 * optional Simple simple = 1;
 * @return {!proto.exonum.runtime.InstanceStatus.Simple}
 */
proto.exonum.runtime.InstanceStatus.prototype.getSimple = function() {
  return /** @type {!proto.exonum.runtime.InstanceStatus.Simple} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.exonum.runtime.InstanceStatus.Simple} value
 * @return {!proto.exonum.runtime.InstanceStatus} returns this
 */
proto.exonum.runtime.InstanceStatus.prototype.setSimple = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.exonum.runtime.InstanceStatus.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.exonum.runtime.InstanceStatus} returns this
 */
proto.exonum.runtime.InstanceStatus.prototype.clearSimple = function() {
  return jspb.Message.setOneofField(this, 1, proto.exonum.runtime.InstanceStatus.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exonum.runtime.InstanceStatus.prototype.hasSimple = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional InstanceMigration migration = 2;
 * @return {?proto.exonum.runtime.InstanceMigration}
 */
proto.exonum.runtime.InstanceStatus.prototype.getMigration = function() {
  return /** @type{?proto.exonum.runtime.InstanceMigration} */ (
    jspb.Message.getWrapperField(this, proto.exonum.runtime.InstanceMigration, 2));
};


/**
 * @param {?proto.exonum.runtime.InstanceMigration|undefined} value
 * @return {!proto.exonum.runtime.InstanceStatus} returns this
*/
proto.exonum.runtime.InstanceStatus.prototype.setMigration = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.exonum.runtime.InstanceStatus.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.exonum.runtime.InstanceStatus} returns this
 */
proto.exonum.runtime.InstanceStatus.prototype.clearMigration = function() {
  return this.setMigration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exonum.runtime.InstanceStatus.prototype.hasMigration = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.exonum.runtime.InstanceMigration.prototype.toObject = function(opt_includeInstance) {
  return proto.exonum.runtime.InstanceMigration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.exonum.runtime.InstanceMigration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exonum.runtime.InstanceMigration.toObject = function(includeInstance, msg) {
  var f, obj = {
    target: (f = msg.getTarget()) && exonum_runtime_base_pb.ArtifactId.toObject(includeInstance, f),
    endVersion: jspb.Message.getFieldWithDefault(msg, 2, ""),
    completedHash: (f = msg.getCompletedHash()) && exonum_crypto_types_pb.Hash.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.exonum.runtime.InstanceMigration}
 */
proto.exonum.runtime.InstanceMigration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.exonum.runtime.InstanceMigration;
  return proto.exonum.runtime.InstanceMigration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.exonum.runtime.InstanceMigration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.exonum.runtime.InstanceMigration}
 */
proto.exonum.runtime.InstanceMigration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new exonum_runtime_base_pb.ArtifactId;
      reader.readMessage(value,exonum_runtime_base_pb.ArtifactId.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndVersion(value);
      break;
    case 3:
      var value = new exonum_crypto_types_pb.Hash;
      reader.readMessage(value,exonum_crypto_types_pb.Hash.deserializeBinaryFromReader);
      msg.setCompletedHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.exonum.runtime.InstanceMigration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.exonum.runtime.InstanceMigration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.exonum.runtime.InstanceMigration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exonum.runtime.InstanceMigration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTarget();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      exonum_runtime_base_pb.ArtifactId.serializeBinaryToWriter
    );
  }
  f = message.getEndVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCompletedHash();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      exonum_crypto_types_pb.Hash.serializeBinaryToWriter
    );
  }
};


/**
 * optional ArtifactId target = 1;
 * @return {?proto.exonum.runtime.ArtifactId}
 */
proto.exonum.runtime.InstanceMigration.prototype.getTarget = function() {
  return /** @type{?proto.exonum.runtime.ArtifactId} */ (
    jspb.Message.getWrapperField(this, exonum_runtime_base_pb.ArtifactId, 1));
};


/**
 * @param {?proto.exonum.runtime.ArtifactId|undefined} value
 * @return {!proto.exonum.runtime.InstanceMigration} returns this
*/
proto.exonum.runtime.InstanceMigration.prototype.setTarget = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.exonum.runtime.InstanceMigration} returns this
 */
proto.exonum.runtime.InstanceMigration.prototype.clearTarget = function() {
  return this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exonum.runtime.InstanceMigration.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string end_version = 2;
 * @return {string}
 */
proto.exonum.runtime.InstanceMigration.prototype.getEndVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.exonum.runtime.InstanceMigration} returns this
 */
proto.exonum.runtime.InstanceMigration.prototype.setEndVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional exonum.crypto.Hash completed_hash = 3;
 * @return {?proto.exonum.crypto.Hash}
 */
proto.exonum.runtime.InstanceMigration.prototype.getCompletedHash = function() {
  return /** @type{?proto.exonum.crypto.Hash} */ (
    jspb.Message.getWrapperField(this, exonum_crypto_types_pb.Hash, 3));
};


/**
 * @param {?proto.exonum.crypto.Hash|undefined} value
 * @return {!proto.exonum.runtime.InstanceMigration} returns this
*/
proto.exonum.runtime.InstanceMigration.prototype.setCompletedHash = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.exonum.runtime.InstanceMigration} returns this
 */
proto.exonum.runtime.InstanceMigration.prototype.clearCompletedHash = function() {
  return this.setCompletedHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exonum.runtime.InstanceMigration.prototype.hasCompletedHash = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.exonum.runtime.InstanceState.prototype.toObject = function(opt_includeInstance) {
  return proto.exonum.runtime.InstanceState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.exonum.runtime.InstanceState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exonum.runtime.InstanceState.toObject = function(includeInstance, msg) {
  var f, obj = {
    spec: (f = msg.getSpec()) && exonum_runtime_base_pb.InstanceSpec.toObject(includeInstance, f),
    status: (f = msg.getStatus()) && proto.exonum.runtime.InstanceStatus.toObject(includeInstance, f),
    pendingStatus: (f = msg.getPendingStatus()) && proto.exonum.runtime.InstanceStatus.toObject(includeInstance, f),
    dataVersion: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.exonum.runtime.InstanceState}
 */
proto.exonum.runtime.InstanceState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.exonum.runtime.InstanceState;
  return proto.exonum.runtime.InstanceState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.exonum.runtime.InstanceState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.exonum.runtime.InstanceState}
 */
proto.exonum.runtime.InstanceState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new exonum_runtime_base_pb.InstanceSpec;
      reader.readMessage(value,exonum_runtime_base_pb.InstanceSpec.deserializeBinaryFromReader);
      msg.setSpec(value);
      break;
    case 2:
      var value = new proto.exonum.runtime.InstanceStatus;
      reader.readMessage(value,proto.exonum.runtime.InstanceStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 3:
      var value = new proto.exonum.runtime.InstanceStatus;
      reader.readMessage(value,proto.exonum.runtime.InstanceStatus.deserializeBinaryFromReader);
      msg.setPendingStatus(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDataVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.exonum.runtime.InstanceState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.exonum.runtime.InstanceState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.exonum.runtime.InstanceState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exonum.runtime.InstanceState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpec();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      exonum_runtime_base_pb.InstanceSpec.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.exonum.runtime.InstanceStatus.serializeBinaryToWriter
    );
  }
  f = message.getPendingStatus();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.exonum.runtime.InstanceStatus.serializeBinaryToWriter
    );
  }
  f = message.getDataVersion();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional InstanceSpec spec = 1;
 * @return {?proto.exonum.runtime.InstanceSpec}
 */
proto.exonum.runtime.InstanceState.prototype.getSpec = function() {
  return /** @type{?proto.exonum.runtime.InstanceSpec} */ (
    jspb.Message.getWrapperField(this, exonum_runtime_base_pb.InstanceSpec, 1));
};


/**
 * @param {?proto.exonum.runtime.InstanceSpec|undefined} value
 * @return {!proto.exonum.runtime.InstanceState} returns this
*/
proto.exonum.runtime.InstanceState.prototype.setSpec = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.exonum.runtime.InstanceState} returns this
 */
proto.exonum.runtime.InstanceState.prototype.clearSpec = function() {
  return this.setSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exonum.runtime.InstanceState.prototype.hasSpec = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional InstanceStatus status = 2;
 * @return {?proto.exonum.runtime.InstanceStatus}
 */
proto.exonum.runtime.InstanceState.prototype.getStatus = function() {
  return /** @type{?proto.exonum.runtime.InstanceStatus} */ (
    jspb.Message.getWrapperField(this, proto.exonum.runtime.InstanceStatus, 2));
};


/**
 * @param {?proto.exonum.runtime.InstanceStatus|undefined} value
 * @return {!proto.exonum.runtime.InstanceState} returns this
*/
proto.exonum.runtime.InstanceState.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.exonum.runtime.InstanceState} returns this
 */
proto.exonum.runtime.InstanceState.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exonum.runtime.InstanceState.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional InstanceStatus pending_status = 3;
 * @return {?proto.exonum.runtime.InstanceStatus}
 */
proto.exonum.runtime.InstanceState.prototype.getPendingStatus = function() {
  return /** @type{?proto.exonum.runtime.InstanceStatus} */ (
    jspb.Message.getWrapperField(this, proto.exonum.runtime.InstanceStatus, 3));
};


/**
 * @param {?proto.exonum.runtime.InstanceStatus|undefined} value
 * @return {!proto.exonum.runtime.InstanceState} returns this
*/
proto.exonum.runtime.InstanceState.prototype.setPendingStatus = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.exonum.runtime.InstanceState} returns this
 */
proto.exonum.runtime.InstanceState.prototype.clearPendingStatus = function() {
  return this.setPendingStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exonum.runtime.InstanceState.prototype.hasPendingStatus = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string data_version = 4;
 * @return {string}
 */
proto.exonum.runtime.InstanceState.prototype.getDataVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.exonum.runtime.InstanceState} returns this
 */
proto.exonum.runtime.InstanceState.prototype.setDataVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.exonum.runtime.MigrationStatus.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.exonum.runtime.MigrationStatus.ResultCase = {
  RESULT_NOT_SET: 0,
  HASH: 1,
  ERROR: 2
};

/**
 * @return {proto.exonum.runtime.MigrationStatus.ResultCase}
 */
proto.exonum.runtime.MigrationStatus.prototype.getResultCase = function() {
  return /** @type {proto.exonum.runtime.MigrationStatus.ResultCase} */(jspb.Message.computeOneofCase(this, proto.exonum.runtime.MigrationStatus.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.exonum.runtime.MigrationStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.exonum.runtime.MigrationStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.exonum.runtime.MigrationStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exonum.runtime.MigrationStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: (f = msg.getHash()) && exonum_crypto_types_pb.Hash.toObject(includeInstance, f),
    error: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.exonum.runtime.MigrationStatus}
 */
proto.exonum.runtime.MigrationStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.exonum.runtime.MigrationStatus;
  return proto.exonum.runtime.MigrationStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.exonum.runtime.MigrationStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.exonum.runtime.MigrationStatus}
 */
proto.exonum.runtime.MigrationStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new exonum_crypto_types_pb.Hash;
      reader.readMessage(value,exonum_crypto_types_pb.Hash.deserializeBinaryFromReader);
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.exonum.runtime.MigrationStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.exonum.runtime.MigrationStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.exonum.runtime.MigrationStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exonum.runtime.MigrationStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      exonum_crypto_types_pb.Hash.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional exonum.crypto.Hash hash = 1;
 * @return {?proto.exonum.crypto.Hash}
 */
proto.exonum.runtime.MigrationStatus.prototype.getHash = function() {
  return /** @type{?proto.exonum.crypto.Hash} */ (
    jspb.Message.getWrapperField(this, exonum_crypto_types_pb.Hash, 1));
};


/**
 * @param {?proto.exonum.crypto.Hash|undefined} value
 * @return {!proto.exonum.runtime.MigrationStatus} returns this
*/
proto.exonum.runtime.MigrationStatus.prototype.setHash = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.exonum.runtime.MigrationStatus.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.exonum.runtime.MigrationStatus} returns this
 */
proto.exonum.runtime.MigrationStatus.prototype.clearHash = function() {
  return this.setHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exonum.runtime.MigrationStatus.prototype.hasHash = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string error = 2;
 * @return {string}
 */
proto.exonum.runtime.MigrationStatus.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.exonum.runtime.MigrationStatus} returns this
 */
proto.exonum.runtime.MigrationStatus.prototype.setError = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.exonum.runtime.MigrationStatus.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.exonum.runtime.MigrationStatus} returns this
 */
proto.exonum.runtime.MigrationStatus.prototype.clearError = function() {
  return jspb.Message.setOneofField(this, 2, proto.exonum.runtime.MigrationStatus.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exonum.runtime.MigrationStatus.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.exonum.runtime);
