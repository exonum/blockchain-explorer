// source: exonum/blockchain.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var exonum_crypto_types_pb = require('../exonum/crypto/types_pb.js');
goog.object.extend(proto, exonum_crypto_types_pb);
var exonum_key_value_sequence_pb = require('../exonum/key_value_sequence_pb.js');
goog.object.extend(proto, exonum_key_value_sequence_pb);
goog.exportSymbol('proto.exonum.AdditionalHeaders', null, global);
goog.exportSymbol('proto.exonum.Block', null, global);
goog.exportSymbol('proto.exonum.CallInBlock', null, global);
goog.exportSymbol('proto.exonum.CallInBlock.CallCase', null, global);
goog.exportSymbol('proto.exonum.Config', null, global);
goog.exportSymbol('proto.exonum.TxLocation', null, global);
goog.exportSymbol('proto.exonum.ValidatorKeys', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.exonum.AdditionalHeaders = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.exonum.AdditionalHeaders, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.exonum.AdditionalHeaders.displayName = 'proto.exonum.AdditionalHeaders';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.exonum.Block = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.exonum.Block, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.exonum.Block.displayName = 'proto.exonum.Block';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.exonum.TxLocation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.exonum.TxLocation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.exonum.TxLocation.displayName = 'proto.exonum.TxLocation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.exonum.CallInBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.exonum.CallInBlock.oneofGroups_);
};
goog.inherits(proto.exonum.CallInBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.exonum.CallInBlock.displayName = 'proto.exonum.CallInBlock';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.exonum.ValidatorKeys = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.exonum.ValidatorKeys, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.exonum.ValidatorKeys.displayName = 'proto.exonum.ValidatorKeys';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.exonum.Config = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.exonum.Config.repeatedFields_, null);
};
goog.inherits(proto.exonum.Config, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.exonum.Config.displayName = 'proto.exonum.Config';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.exonum.AdditionalHeaders.prototype.toObject = function(opt_includeInstance) {
  return proto.exonum.AdditionalHeaders.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.exonum.AdditionalHeaders} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exonum.AdditionalHeaders.toObject = function(includeInstance, msg) {
  var f, obj = {
    headers: (f = msg.getHeaders()) && exonum_key_value_sequence_pb.KeyValueSequence.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.exonum.AdditionalHeaders}
 */
proto.exonum.AdditionalHeaders.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.exonum.AdditionalHeaders;
  return proto.exonum.AdditionalHeaders.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.exonum.AdditionalHeaders} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.exonum.AdditionalHeaders}
 */
proto.exonum.AdditionalHeaders.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new exonum_key_value_sequence_pb.KeyValueSequence;
      reader.readMessage(value,exonum_key_value_sequence_pb.KeyValueSequence.deserializeBinaryFromReader);
      msg.setHeaders(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.exonum.AdditionalHeaders.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.exonum.AdditionalHeaders.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.exonum.AdditionalHeaders} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exonum.AdditionalHeaders.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeaders();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      exonum_key_value_sequence_pb.KeyValueSequence.serializeBinaryToWriter
    );
  }
};


/**
 * optional KeyValueSequence headers = 1;
 * @return {?proto.exonum.KeyValueSequence}
 */
proto.exonum.AdditionalHeaders.prototype.getHeaders = function() {
  return /** @type{?proto.exonum.KeyValueSequence} */ (
    jspb.Message.getWrapperField(this, exonum_key_value_sequence_pb.KeyValueSequence, 1));
};


/**
 * @param {?proto.exonum.KeyValueSequence|undefined} value
 * @return {!proto.exonum.AdditionalHeaders} returns this
*/
proto.exonum.AdditionalHeaders.prototype.setHeaders = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.exonum.AdditionalHeaders} returns this
 */
proto.exonum.AdditionalHeaders.prototype.clearHeaders = function() {
  return this.setHeaders(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exonum.AdditionalHeaders.prototype.hasHeaders = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.exonum.Block.prototype.toObject = function(opt_includeInstance) {
  return proto.exonum.Block.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.exonum.Block} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exonum.Block.toObject = function(includeInstance, msg) {
  var f, obj = {
    proposerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    txCount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    prevHash: (f = msg.getPrevHash()) && exonum_crypto_types_pb.Hash.toObject(includeInstance, f),
    txHash: (f = msg.getTxHash()) && exonum_crypto_types_pb.Hash.toObject(includeInstance, f),
    stateHash: (f = msg.getStateHash()) && exonum_crypto_types_pb.Hash.toObject(includeInstance, f),
    errorHash: (f = msg.getErrorHash()) && exonum_crypto_types_pb.Hash.toObject(includeInstance, f),
    additionalHeaders: (f = msg.getAdditionalHeaders()) && proto.exonum.AdditionalHeaders.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.exonum.Block}
 */
proto.exonum.Block.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.exonum.Block;
  return proto.exonum.Block.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.exonum.Block} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.exonum.Block}
 */
proto.exonum.Block.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setProposerId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTxCount(value);
      break;
    case 4:
      var value = new exonum_crypto_types_pb.Hash;
      reader.readMessage(value,exonum_crypto_types_pb.Hash.deserializeBinaryFromReader);
      msg.setPrevHash(value);
      break;
    case 5:
      var value = new exonum_crypto_types_pb.Hash;
      reader.readMessage(value,exonum_crypto_types_pb.Hash.deserializeBinaryFromReader);
      msg.setTxHash(value);
      break;
    case 6:
      var value = new exonum_crypto_types_pb.Hash;
      reader.readMessage(value,exonum_crypto_types_pb.Hash.deserializeBinaryFromReader);
      msg.setStateHash(value);
      break;
    case 7:
      var value = new exonum_crypto_types_pb.Hash;
      reader.readMessage(value,exonum_crypto_types_pb.Hash.deserializeBinaryFromReader);
      msg.setErrorHash(value);
      break;
    case 8:
      var value = new proto.exonum.AdditionalHeaders;
      reader.readMessage(value,proto.exonum.AdditionalHeaders.deserializeBinaryFromReader);
      msg.setAdditionalHeaders(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.exonum.Block.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.exonum.Block.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.exonum.Block} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exonum.Block.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProposerId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getTxCount();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getPrevHash();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      exonum_crypto_types_pb.Hash.serializeBinaryToWriter
    );
  }
  f = message.getTxHash();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      exonum_crypto_types_pb.Hash.serializeBinaryToWriter
    );
  }
  f = message.getStateHash();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      exonum_crypto_types_pb.Hash.serializeBinaryToWriter
    );
  }
  f = message.getErrorHash();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      exonum_crypto_types_pb.Hash.serializeBinaryToWriter
    );
  }
  f = message.getAdditionalHeaders();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.exonum.AdditionalHeaders.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 proposer_id = 1;
 * @return {number}
 */
proto.exonum.Block.prototype.getProposerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.exonum.Block} returns this
 */
proto.exonum.Block.prototype.setProposerId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 height = 2;
 * @return {number}
 */
proto.exonum.Block.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.exonum.Block} returns this
 */
proto.exonum.Block.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 tx_count = 3;
 * @return {number}
 */
proto.exonum.Block.prototype.getTxCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.exonum.Block} returns this
 */
proto.exonum.Block.prototype.setTxCount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional crypto.Hash prev_hash = 4;
 * @return {?proto.exonum.crypto.Hash}
 */
proto.exonum.Block.prototype.getPrevHash = function() {
  return /** @type{?proto.exonum.crypto.Hash} */ (
    jspb.Message.getWrapperField(this, exonum_crypto_types_pb.Hash, 4));
};


/**
 * @param {?proto.exonum.crypto.Hash|undefined} value
 * @return {!proto.exonum.Block} returns this
*/
proto.exonum.Block.prototype.setPrevHash = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.exonum.Block} returns this
 */
proto.exonum.Block.prototype.clearPrevHash = function() {
  return this.setPrevHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exonum.Block.prototype.hasPrevHash = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional crypto.Hash tx_hash = 5;
 * @return {?proto.exonum.crypto.Hash}
 */
proto.exonum.Block.prototype.getTxHash = function() {
  return /** @type{?proto.exonum.crypto.Hash} */ (
    jspb.Message.getWrapperField(this, exonum_crypto_types_pb.Hash, 5));
};


/**
 * @param {?proto.exonum.crypto.Hash|undefined} value
 * @return {!proto.exonum.Block} returns this
*/
proto.exonum.Block.prototype.setTxHash = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.exonum.Block} returns this
 */
proto.exonum.Block.prototype.clearTxHash = function() {
  return this.setTxHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exonum.Block.prototype.hasTxHash = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional crypto.Hash state_hash = 6;
 * @return {?proto.exonum.crypto.Hash}
 */
proto.exonum.Block.prototype.getStateHash = function() {
  return /** @type{?proto.exonum.crypto.Hash} */ (
    jspb.Message.getWrapperField(this, exonum_crypto_types_pb.Hash, 6));
};


/**
 * @param {?proto.exonum.crypto.Hash|undefined} value
 * @return {!proto.exonum.Block} returns this
*/
proto.exonum.Block.prototype.setStateHash = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.exonum.Block} returns this
 */
proto.exonum.Block.prototype.clearStateHash = function() {
  return this.setStateHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exonum.Block.prototype.hasStateHash = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional crypto.Hash error_hash = 7;
 * @return {?proto.exonum.crypto.Hash}
 */
proto.exonum.Block.prototype.getErrorHash = function() {
  return /** @type{?proto.exonum.crypto.Hash} */ (
    jspb.Message.getWrapperField(this, exonum_crypto_types_pb.Hash, 7));
};


/**
 * @param {?proto.exonum.crypto.Hash|undefined} value
 * @return {!proto.exonum.Block} returns this
*/
proto.exonum.Block.prototype.setErrorHash = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.exonum.Block} returns this
 */
proto.exonum.Block.prototype.clearErrorHash = function() {
  return this.setErrorHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exonum.Block.prototype.hasErrorHash = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional AdditionalHeaders additional_headers = 8;
 * @return {?proto.exonum.AdditionalHeaders}
 */
proto.exonum.Block.prototype.getAdditionalHeaders = function() {
  return /** @type{?proto.exonum.AdditionalHeaders} */ (
    jspb.Message.getWrapperField(this, proto.exonum.AdditionalHeaders, 8));
};


/**
 * @param {?proto.exonum.AdditionalHeaders|undefined} value
 * @return {!proto.exonum.Block} returns this
*/
proto.exonum.Block.prototype.setAdditionalHeaders = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.exonum.Block} returns this
 */
proto.exonum.Block.prototype.clearAdditionalHeaders = function() {
  return this.setAdditionalHeaders(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exonum.Block.prototype.hasAdditionalHeaders = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.exonum.TxLocation.prototype.toObject = function(opt_includeInstance) {
  return proto.exonum.TxLocation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.exonum.TxLocation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exonum.TxLocation.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockHeight: jspb.Message.getFieldWithDefault(msg, 1, 0),
    positionInBlock: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.exonum.TxLocation}
 */
proto.exonum.TxLocation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.exonum.TxLocation;
  return proto.exonum.TxLocation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.exonum.TxLocation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.exonum.TxLocation}
 */
proto.exonum.TxLocation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockHeight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPositionInBlock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.exonum.TxLocation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.exonum.TxLocation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.exonum.TxLocation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exonum.TxLocation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getPositionInBlock();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint64 block_height = 1;
 * @return {number}
 */
proto.exonum.TxLocation.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.exonum.TxLocation} returns this
 */
proto.exonum.TxLocation.prototype.setBlockHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 position_in_block = 2;
 * @return {number}
 */
proto.exonum.TxLocation.prototype.getPositionInBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.exonum.TxLocation} returns this
 */
proto.exonum.TxLocation.prototype.setPositionInBlock = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.exonum.CallInBlock.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.exonum.CallInBlock.CallCase = {
  CALL_NOT_SET: 0,
  TRANSACTION: 1,
  BEFORE_TRANSACTIONS: 2,
  AFTER_TRANSACTIONS: 3
};

/**
 * @return {proto.exonum.CallInBlock.CallCase}
 */
proto.exonum.CallInBlock.prototype.getCallCase = function() {
  return /** @type {proto.exonum.CallInBlock.CallCase} */(jspb.Message.computeOneofCase(this, proto.exonum.CallInBlock.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.exonum.CallInBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.exonum.CallInBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.exonum.CallInBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exonum.CallInBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    transaction: jspb.Message.getFieldWithDefault(msg, 1, 0),
    beforeTransactions: jspb.Message.getFieldWithDefault(msg, 2, 0),
    afterTransactions: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.exonum.CallInBlock}
 */
proto.exonum.CallInBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.exonum.CallInBlock;
  return proto.exonum.CallInBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.exonum.CallInBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.exonum.CallInBlock}
 */
proto.exonum.CallInBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTransaction(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBeforeTransactions(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAfterTransactions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.exonum.CallInBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.exonum.CallInBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.exonum.CallInBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exonum.CallInBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 transaction = 1;
 * @return {number}
 */
proto.exonum.CallInBlock.prototype.getTransaction = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.exonum.CallInBlock} returns this
 */
proto.exonum.CallInBlock.prototype.setTransaction = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.exonum.CallInBlock.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.exonum.CallInBlock} returns this
 */
proto.exonum.CallInBlock.prototype.clearTransaction = function() {
  return jspb.Message.setOneofField(this, 1, proto.exonum.CallInBlock.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exonum.CallInBlock.prototype.hasTransaction = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 before_transactions = 2;
 * @return {number}
 */
proto.exonum.CallInBlock.prototype.getBeforeTransactions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.exonum.CallInBlock} returns this
 */
proto.exonum.CallInBlock.prototype.setBeforeTransactions = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.exonum.CallInBlock.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.exonum.CallInBlock} returns this
 */
proto.exonum.CallInBlock.prototype.clearBeforeTransactions = function() {
  return jspb.Message.setOneofField(this, 2, proto.exonum.CallInBlock.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exonum.CallInBlock.prototype.hasBeforeTransactions = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 after_transactions = 3;
 * @return {number}
 */
proto.exonum.CallInBlock.prototype.getAfterTransactions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.exonum.CallInBlock} returns this
 */
proto.exonum.CallInBlock.prototype.setAfterTransactions = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.exonum.CallInBlock.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.exonum.CallInBlock} returns this
 */
proto.exonum.CallInBlock.prototype.clearAfterTransactions = function() {
  return jspb.Message.setOneofField(this, 3, proto.exonum.CallInBlock.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exonum.CallInBlock.prototype.hasAfterTransactions = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.exonum.ValidatorKeys.prototype.toObject = function(opt_includeInstance) {
  return proto.exonum.ValidatorKeys.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.exonum.ValidatorKeys} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exonum.ValidatorKeys.toObject = function(includeInstance, msg) {
  var f, obj = {
    consensusKey: (f = msg.getConsensusKey()) && exonum_crypto_types_pb.PublicKey.toObject(includeInstance, f),
    serviceKey: (f = msg.getServiceKey()) && exonum_crypto_types_pb.PublicKey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.exonum.ValidatorKeys}
 */
proto.exonum.ValidatorKeys.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.exonum.ValidatorKeys;
  return proto.exonum.ValidatorKeys.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.exonum.ValidatorKeys} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.exonum.ValidatorKeys}
 */
proto.exonum.ValidatorKeys.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new exonum_crypto_types_pb.PublicKey;
      reader.readMessage(value,exonum_crypto_types_pb.PublicKey.deserializeBinaryFromReader);
      msg.setConsensusKey(value);
      break;
    case 2:
      var value = new exonum_crypto_types_pb.PublicKey;
      reader.readMessage(value,exonum_crypto_types_pb.PublicKey.deserializeBinaryFromReader);
      msg.setServiceKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.exonum.ValidatorKeys.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.exonum.ValidatorKeys.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.exonum.ValidatorKeys} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exonum.ValidatorKeys.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConsensusKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      exonum_crypto_types_pb.PublicKey.serializeBinaryToWriter
    );
  }
  f = message.getServiceKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      exonum_crypto_types_pb.PublicKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional crypto.PublicKey consensus_key = 1;
 * @return {?proto.exonum.crypto.PublicKey}
 */
proto.exonum.ValidatorKeys.prototype.getConsensusKey = function() {
  return /** @type{?proto.exonum.crypto.PublicKey} */ (
    jspb.Message.getWrapperField(this, exonum_crypto_types_pb.PublicKey, 1));
};


/**
 * @param {?proto.exonum.crypto.PublicKey|undefined} value
 * @return {!proto.exonum.ValidatorKeys} returns this
*/
proto.exonum.ValidatorKeys.prototype.setConsensusKey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.exonum.ValidatorKeys} returns this
 */
proto.exonum.ValidatorKeys.prototype.clearConsensusKey = function() {
  return this.setConsensusKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exonum.ValidatorKeys.prototype.hasConsensusKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional crypto.PublicKey service_key = 2;
 * @return {?proto.exonum.crypto.PublicKey}
 */
proto.exonum.ValidatorKeys.prototype.getServiceKey = function() {
  return /** @type{?proto.exonum.crypto.PublicKey} */ (
    jspb.Message.getWrapperField(this, exonum_crypto_types_pb.PublicKey, 2));
};


/**
 * @param {?proto.exonum.crypto.PublicKey|undefined} value
 * @return {!proto.exonum.ValidatorKeys} returns this
*/
proto.exonum.ValidatorKeys.prototype.setServiceKey = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.exonum.ValidatorKeys} returns this
 */
proto.exonum.ValidatorKeys.prototype.clearServiceKey = function() {
  return this.setServiceKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exonum.ValidatorKeys.prototype.hasServiceKey = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.exonum.Config.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.exonum.Config.prototype.toObject = function(opt_includeInstance) {
  return proto.exonum.Config.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.exonum.Config} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exonum.Config.toObject = function(includeInstance, msg) {
  var f, obj = {
    validatorKeysList: jspb.Message.toObjectList(msg.getValidatorKeysList(),
    proto.exonum.ValidatorKeys.toObject, includeInstance),
    firstRoundTimeout: jspb.Message.getFieldWithDefault(msg, 2, 0),
    statusTimeout: jspb.Message.getFieldWithDefault(msg, 3, 0),
    peersTimeout: jspb.Message.getFieldWithDefault(msg, 4, 0),
    txsBlockLimit: jspb.Message.getFieldWithDefault(msg, 5, 0),
    maxMessageLen: jspb.Message.getFieldWithDefault(msg, 6, 0),
    minProposeTimeout: jspb.Message.getFieldWithDefault(msg, 7, 0),
    maxProposeTimeout: jspb.Message.getFieldWithDefault(msg, 8, 0),
    proposeTimeoutThreshold: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.exonum.Config}
 */
proto.exonum.Config.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.exonum.Config;
  return proto.exonum.Config.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.exonum.Config} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.exonum.Config}
 */
proto.exonum.Config.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.exonum.ValidatorKeys;
      reader.readMessage(value,proto.exonum.ValidatorKeys.deserializeBinaryFromReader);
      msg.addValidatorKeys(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFirstRoundTimeout(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStatusTimeout(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPeersTimeout(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTxsBlockLimit(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxMessageLen(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMinProposeTimeout(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxProposeTimeout(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setProposeTimeoutThreshold(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.exonum.Config.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.exonum.Config.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.exonum.Config} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exonum.Config.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValidatorKeysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.exonum.ValidatorKeys.serializeBinaryToWriter
    );
  }
  f = message.getFirstRoundTimeout();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getStatusTimeout();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getPeersTimeout();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getTxsBlockLimit();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getMaxMessageLen();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getMinProposeTimeout();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getMaxProposeTimeout();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getProposeTimeoutThreshold();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
};


/**
 * repeated ValidatorKeys validator_keys = 1;
 * @return {!Array<!proto.exonum.ValidatorKeys>}
 */
proto.exonum.Config.prototype.getValidatorKeysList = function() {
  return /** @type{!Array<!proto.exonum.ValidatorKeys>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.exonum.ValidatorKeys, 1));
};


/**
 * @param {!Array<!proto.exonum.ValidatorKeys>} value
 * @return {!proto.exonum.Config} returns this
*/
proto.exonum.Config.prototype.setValidatorKeysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.exonum.ValidatorKeys=} opt_value
 * @param {number=} opt_index
 * @return {!proto.exonum.ValidatorKeys}
 */
proto.exonum.Config.prototype.addValidatorKeys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.exonum.ValidatorKeys, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.exonum.Config} returns this
 */
proto.exonum.Config.prototype.clearValidatorKeysList = function() {
  return this.setValidatorKeysList([]);
};


/**
 * optional uint64 first_round_timeout = 2;
 * @return {number}
 */
proto.exonum.Config.prototype.getFirstRoundTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.exonum.Config} returns this
 */
proto.exonum.Config.prototype.setFirstRoundTimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 status_timeout = 3;
 * @return {number}
 */
proto.exonum.Config.prototype.getStatusTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.exonum.Config} returns this
 */
proto.exonum.Config.prototype.setStatusTimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 peers_timeout = 4;
 * @return {number}
 */
proto.exonum.Config.prototype.getPeersTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.exonum.Config} returns this
 */
proto.exonum.Config.prototype.setPeersTimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 txs_block_limit = 5;
 * @return {number}
 */
proto.exonum.Config.prototype.getTxsBlockLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.exonum.Config} returns this
 */
proto.exonum.Config.prototype.setTxsBlockLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 max_message_len = 6;
 * @return {number}
 */
proto.exonum.Config.prototype.getMaxMessageLen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.exonum.Config} returns this
 */
proto.exonum.Config.prototype.setMaxMessageLen = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 min_propose_timeout = 7;
 * @return {number}
 */
proto.exonum.Config.prototype.getMinProposeTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.exonum.Config} returns this
 */
proto.exonum.Config.prototype.setMinProposeTimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 max_propose_timeout = 8;
 * @return {number}
 */
proto.exonum.Config.prototype.getMaxProposeTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.exonum.Config} returns this
 */
proto.exonum.Config.prototype.setMaxProposeTimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint32 propose_timeout_threshold = 9;
 * @return {number}
 */
proto.exonum.Config.prototype.getProposeTimeoutThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.exonum.Config} returns this
 */
proto.exonum.Config.prototype.setProposeTimeoutThreshold = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


goog.object.extend(exports, proto.exonum);
