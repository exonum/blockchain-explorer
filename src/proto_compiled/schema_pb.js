// source: schema.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var exonum_crypto_types_pb = require('./exonum/crypto/types_pb.js');
goog.object.extend(proto, exonum_crypto_types_pb);
var custom_types_pb = require('./custom_types_pb.js');
goog.object.extend(proto, custom_types_pb);
var enums_pb = require('./enums_pb.js');
goog.object.extend(proto, enums_pb);
var variants_ballot_status_pb = require('./variants/ballot_status_pb.js');
goog.object.extend(proto, variants_ballot_status_pb);
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.votings_service.Ballot', null, global);
goog.exportSymbol('proto.votings_service.BallotConfig', null, global);
goog.exportSymbol('proto.votings_service.BallotsStorage', null, global);
goog.exportSymbol('proto.votings_service.Choices', null, global);
goog.exportSymbol('proto.votings_service.CryptoSystemSettings', null, global);
goog.exportSymbol('proto.votings_service.DecryptionStatistics', null, global);
goog.exportSymbol('proto.votings_service.DistrictResults', null, global);
goog.exportSymbol('proto.votings_service.EncryptedChoice', null, global);
goog.exportSymbol('proto.votings_service.Voter', null, global);
goog.exportSymbol('proto.votings_service.VotersRegistry', null, global);
goog.exportSymbol('proto.votings_service.Voting', null, global);
goog.exportSymbol('proto.votings_service.VotingResults', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.votings_service.CryptoSystemSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.votings_service.CryptoSystemSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.votings_service.CryptoSystemSettings.displayName = 'proto.votings_service.CryptoSystemSettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.votings_service.BallotConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.votings_service.BallotConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.votings_service.BallotConfig.displayName = 'proto.votings_service.BallotConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.votings_service.Voting = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.votings_service.Voting, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.votings_service.Voting.displayName = 'proto.votings_service.Voting';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.votings_service.VotersRegistry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.votings_service.VotersRegistry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.votings_service.VotersRegistry.displayName = 'proto.votings_service.VotersRegistry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.votings_service.Voter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.votings_service.Voter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.votings_service.Voter.displayName = 'proto.votings_service.Voter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.votings_service.Choices = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.votings_service.Choices.repeatedFields_, null);
};
goog.inherits(proto.votings_service.Choices, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.votings_service.Choices.displayName = 'proto.votings_service.Choices';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.votings_service.EncryptedChoice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.votings_service.EncryptedChoice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.votings_service.EncryptedChoice.displayName = 'proto.votings_service.EncryptedChoice';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.votings_service.Ballot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.votings_service.Ballot.repeatedFields_, null);
};
goog.inherits(proto.votings_service.Ballot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.votings_service.Ballot.displayName = 'proto.votings_service.Ballot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.votings_service.DecryptionStatistics = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.votings_service.DecryptionStatistics, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.votings_service.DecryptionStatistics.displayName = 'proto.votings_service.DecryptionStatistics';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.votings_service.DistrictResults = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.votings_service.DistrictResults, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.votings_service.DistrictResults.displayName = 'proto.votings_service.DistrictResults';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.votings_service.VotingResults = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.votings_service.VotingResults, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.votings_service.VotingResults.displayName = 'proto.votings_service.VotingResults';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.votings_service.BallotsStorage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.votings_service.BallotsStorage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.votings_service.BallotsStorage.displayName = 'proto.votings_service.BallotsStorage';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.votings_service.CryptoSystemSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.votings_service.CryptoSystemSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.votings_service.CryptoSystemSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.CryptoSystemSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    publicKey: (f = msg.getPublicKey()) && custom_types_pb.SealedBoxPublicKey.toObject(includeInstance, f),
    privateKey: (f = msg.getPrivateKey()) && custom_types_pb.SealedBoxSecretKey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.votings_service.CryptoSystemSettings}
 */
proto.votings_service.CryptoSystemSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.votings_service.CryptoSystemSettings;
  return proto.votings_service.CryptoSystemSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.votings_service.CryptoSystemSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.votings_service.CryptoSystemSettings}
 */
proto.votings_service.CryptoSystemSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new custom_types_pb.SealedBoxPublicKey;
      reader.readMessage(value,custom_types_pb.SealedBoxPublicKey.deserializeBinaryFromReader);
      msg.setPublicKey(value);
      break;
    case 2:
      var value = new custom_types_pb.SealedBoxSecretKey;
      reader.readMessage(value,custom_types_pb.SealedBoxSecretKey.deserializeBinaryFromReader);
      msg.setPrivateKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.votings_service.CryptoSystemSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.votings_service.CryptoSystemSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.votings_service.CryptoSystemSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.CryptoSystemSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublicKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      custom_types_pb.SealedBoxPublicKey.serializeBinaryToWriter
    );
  }
  f = message.getPrivateKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      custom_types_pb.SealedBoxSecretKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional SealedBoxPublicKey public_key = 1;
 * @return {?proto.votings_service.SealedBoxPublicKey}
 */
proto.votings_service.CryptoSystemSettings.prototype.getPublicKey = function() {
  return /** @type{?proto.votings_service.SealedBoxPublicKey} */ (
    jspb.Message.getWrapperField(this, custom_types_pb.SealedBoxPublicKey, 1));
};


/**
 * @param {?proto.votings_service.SealedBoxPublicKey|undefined} value
 * @return {!proto.votings_service.CryptoSystemSettings} returns this
*/
proto.votings_service.CryptoSystemSettings.prototype.setPublicKey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.votings_service.CryptoSystemSettings} returns this
 */
proto.votings_service.CryptoSystemSettings.prototype.clearPublicKey = function() {
  return this.setPublicKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.votings_service.CryptoSystemSettings.prototype.hasPublicKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SealedBoxSecretKey private_key = 2;
 * @return {?proto.votings_service.SealedBoxSecretKey}
 */
proto.votings_service.CryptoSystemSettings.prototype.getPrivateKey = function() {
  return /** @type{?proto.votings_service.SealedBoxSecretKey} */ (
    jspb.Message.getWrapperField(this, custom_types_pb.SealedBoxSecretKey, 2));
};


/**
 * @param {?proto.votings_service.SealedBoxSecretKey|undefined} value
 * @return {!proto.votings_service.CryptoSystemSettings} returns this
*/
proto.votings_service.CryptoSystemSettings.prototype.setPrivateKey = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.votings_service.CryptoSystemSettings} returns this
 */
proto.votings_service.CryptoSystemSettings.prototype.clearPrivateKey = function() {
  return this.setPrivateKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.votings_service.CryptoSystemSettings.prototype.hasPrivateKey = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.votings_service.BallotConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.votings_service.BallotConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.votings_service.BallotConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.BallotConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    districtId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    question: jspb.Message.getFieldWithDefault(msg, 2, ""),
    optionsMap: (f = msg.getOptionsMap()) ? f.toObject(includeInstance, undefined) : [],
    minChoices: jspb.Message.getFieldWithDefault(msg, 4, 0),
    maxChoices: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.votings_service.BallotConfig}
 */
proto.votings_service.BallotConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.votings_service.BallotConfig;
  return proto.votings_service.BallotConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.votings_service.BallotConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.votings_service.BallotConfig}
 */
proto.votings_service.BallotConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDistrictId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuestion(value);
      break;
    case 3:
      var value = msg.getOptionsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readString, null, 0, "");
         });
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinChoices(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxChoices(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.votings_service.BallotConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.votings_service.BallotConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.votings_service.BallotConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.BallotConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDistrictId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getQuestion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOptionsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getMinChoices();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getMaxChoices();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional uint32 district_id = 1;
 * @return {number}
 */
proto.votings_service.BallotConfig.prototype.getDistrictId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.votings_service.BallotConfig} returns this
 */
proto.votings_service.BallotConfig.prototype.setDistrictId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string question = 2;
 * @return {string}
 */
proto.votings_service.BallotConfig.prototype.getQuestion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.votings_service.BallotConfig} returns this
 */
proto.votings_service.BallotConfig.prototype.setQuestion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * map<uint32, string> options = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,string>}
 */
proto.votings_service.BallotConfig.prototype.getOptionsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.votings_service.BallotConfig} returns this
 */
proto.votings_service.BallotConfig.prototype.clearOptionsMap = function() {
  this.getOptionsMap().clear();
  return this;
};


/**
 * optional uint32 min_choices = 4;
 * @return {number}
 */
proto.votings_service.BallotConfig.prototype.getMinChoices = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.votings_service.BallotConfig} returns this
 */
proto.votings_service.BallotConfig.prototype.setMinChoices = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 max_choices = 5;
 * @return {number}
 */
proto.votings_service.BallotConfig.prototype.getMaxChoices = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.votings_service.BallotConfig} returns this
 */
proto.votings_service.BallotConfig.prototype.setMaxChoices = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.votings_service.Voting.prototype.toObject = function(opt_includeInstance) {
  return proto.votings_service.Voting.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.votings_service.Voting} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.Voting.toObject = function(includeInstance, msg) {
  var f, obj = {
    votingId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    cryptoSystem: (f = msg.getCryptoSystem()) && proto.votings_service.CryptoSystemSettings.toObject(includeInstance, f),
    ballotsConfigMap: (f = msg.getBallotsConfigMap()) ? f.toObject(includeInstance, proto.votings_service.BallotConfig.toObject) : [],
    state: jspb.Message.getFieldWithDefault(msg, 4, 0),
    revoteEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.votings_service.Voting}
 */
proto.votings_service.Voting.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.votings_service.Voting;
  return proto.votings_service.Voting.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.votings_service.Voting} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.votings_service.Voting}
 */
proto.votings_service.Voting.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVotingId(value);
      break;
    case 2:
      var value = new proto.votings_service.CryptoSystemSettings;
      reader.readMessage(value,proto.votings_service.CryptoSystemSettings.deserializeBinaryFromReader);
      msg.setCryptoSystem(value);
      break;
    case 3:
      var value = msg.getBallotsConfigMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readMessage, proto.votings_service.BallotConfig.deserializeBinaryFromReader, 0, new proto.votings_service.BallotConfig());
         });
      break;
    case 4:
      var value = /** @type {!proto.votings_service.VotingState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRevoteEnabled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.votings_service.Voting.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.votings_service.Voting.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.votings_service.Voting} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.Voting.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVotingId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCryptoSystem();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.votings_service.CryptoSystemSettings.serializeBinaryToWriter
    );
  }
  f = message.getBallotsConfigMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeMessage, proto.votings_service.BallotConfig.serializeBinaryToWriter);
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getRevoteEnabled();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional string voting_id = 1;
 * @return {string}
 */
proto.votings_service.Voting.prototype.getVotingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.votings_service.Voting} returns this
 */
proto.votings_service.Voting.prototype.setVotingId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional CryptoSystemSettings crypto_system = 2;
 * @return {?proto.votings_service.CryptoSystemSettings}
 */
proto.votings_service.Voting.prototype.getCryptoSystem = function() {
  return /** @type{?proto.votings_service.CryptoSystemSettings} */ (
    jspb.Message.getWrapperField(this, proto.votings_service.CryptoSystemSettings, 2));
};


/**
 * @param {?proto.votings_service.CryptoSystemSettings|undefined} value
 * @return {!proto.votings_service.Voting} returns this
*/
proto.votings_service.Voting.prototype.setCryptoSystem = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.votings_service.Voting} returns this
 */
proto.votings_service.Voting.prototype.clearCryptoSystem = function() {
  return this.setCryptoSystem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.votings_service.Voting.prototype.hasCryptoSystem = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * map<uint32, BallotConfig> ballots_config = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.votings_service.BallotConfig>}
 */
proto.votings_service.Voting.prototype.getBallotsConfigMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.votings_service.BallotConfig>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.votings_service.BallotConfig));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.votings_service.Voting} returns this
 */
proto.votings_service.Voting.prototype.clearBallotsConfigMap = function() {
  this.getBallotsConfigMap().clear();
  return this;
};


/**
 * optional VotingState state = 4;
 * @return {!proto.votings_service.VotingState}
 */
proto.votings_service.Voting.prototype.getState = function() {
  return /** @type {!proto.votings_service.VotingState} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.votings_service.VotingState} value
 * @return {!proto.votings_service.Voting} returns this
 */
proto.votings_service.Voting.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional bool revote_enabled = 5;
 * @return {boolean}
 */
proto.votings_service.Voting.prototype.getRevoteEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.votings_service.Voting} returns this
 */
proto.votings_service.Voting.prototype.setRevoteEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.votings_service.VotersRegistry.prototype.toObject = function(opt_includeInstance) {
  return proto.votings_service.VotersRegistry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.votings_service.VotersRegistry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.VotersRegistry.toObject = function(includeInstance, msg) {
  var f, obj = {
    votingId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    votersAmount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    issuedBallotsCounterMap: (f = msg.getIssuedBallotsCounterMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.votings_service.VotersRegistry}
 */
proto.votings_service.VotersRegistry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.votings_service.VotersRegistry;
  return proto.votings_service.VotersRegistry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.votings_service.VotersRegistry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.votings_service.VotersRegistry}
 */
proto.votings_service.VotersRegistry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVotingId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVotersAmount(value);
      break;
    case 3:
      var value = msg.getIssuedBallotsCounterMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readUint32, null, 0, 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.votings_service.VotersRegistry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.votings_service.VotersRegistry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.votings_service.VotersRegistry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.VotersRegistry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVotingId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVotersAmount();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getIssuedBallotsCounterMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeUint32);
  }
};


/**
 * optional string voting_id = 1;
 * @return {string}
 */
proto.votings_service.VotersRegistry.prototype.getVotingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.votings_service.VotersRegistry} returns this
 */
proto.votings_service.VotersRegistry.prototype.setVotingId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 voters_amount = 2;
 * @return {number}
 */
proto.votings_service.VotersRegistry.prototype.getVotersAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.votings_service.VotersRegistry} returns this
 */
proto.votings_service.VotersRegistry.prototype.setVotersAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * map<uint32, uint32> issued_ballots_counter = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.votings_service.VotersRegistry.prototype.getIssuedBallotsCounterMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.votings_service.VotersRegistry} returns this
 */
proto.votings_service.VotersRegistry.prototype.clearIssuedBallotsCounterMap = function() {
  this.getIssuedBallotsCounterMap().clear();
  return this;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.votings_service.Voter.prototype.toObject = function(opt_includeInstance) {
  return proto.votings_service.Voter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.votings_service.Voter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.Voter.toObject = function(includeInstance, msg) {
  var f, obj = {
    voterId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    isParticipationRevoked: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    ballotIssuingDistrict: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.votings_service.Voter}
 */
proto.votings_service.Voter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.votings_service.Voter;
  return proto.votings_service.Voter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.votings_service.Voter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.votings_service.Voter}
 */
proto.votings_service.Voter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVoterId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsParticipationRevoked(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBallotIssuingDistrict(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.votings_service.Voter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.votings_service.Voter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.votings_service.Voter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.Voter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVoterId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIsParticipationRevoked();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getBallotIssuingDistrict();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional string voter_id = 1;
 * @return {string}
 */
proto.votings_service.Voter.prototype.getVoterId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.votings_service.Voter} returns this
 */
proto.votings_service.Voter.prototype.setVoterId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool is_participation_revoked = 2;
 * @return {boolean}
 */
proto.votings_service.Voter.prototype.getIsParticipationRevoked = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.votings_service.Voter} returns this
 */
proto.votings_service.Voter.prototype.setIsParticipationRevoked = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional uint32 ballot_issuing_district = 3;
 * @return {number}
 */
proto.votings_service.Voter.prototype.getBallotIssuingDistrict = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.votings_service.Voter} returns this
 */
proto.votings_service.Voter.prototype.setBallotIssuingDistrict = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.votings_service.Choices.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.votings_service.Choices.prototype.toObject = function(opt_includeInstance) {
  return proto.votings_service.Choices.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.votings_service.Choices} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.Choices.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.votings_service.Choices}
 */
proto.votings_service.Choices.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.votings_service.Choices;
  return proto.votings_service.Choices.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.votings_service.Choices} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.votings_service.Choices}
 */
proto.votings_service.Choices.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addData(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.votings_service.Choices.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.votings_service.Choices.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.votings_service.Choices} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.Choices.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
};


/**
 * repeated uint32 data = 1;
 * @return {!Array<number>}
 */
proto.votings_service.Choices.prototype.getDataList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.votings_service.Choices} returns this
 */
proto.votings_service.Choices.prototype.setDataList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.votings_service.Choices} returns this
 */
proto.votings_service.Choices.prototype.addData = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.votings_service.Choices} returns this
 */
proto.votings_service.Choices.prototype.clearDataList = function() {
  return this.setDataList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.votings_service.EncryptedChoice.prototype.toObject = function(opt_includeInstance) {
  return proto.votings_service.EncryptedChoice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.votings_service.EncryptedChoice} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.EncryptedChoice.toObject = function(includeInstance, msg) {
  var f, obj = {
    encryptedMessage: msg.getEncryptedMessage_asB64(),
    nonce: (f = msg.getNonce()) && custom_types_pb.SealedBoxNonce.toObject(includeInstance, f),
    publicKey: (f = msg.getPublicKey()) && custom_types_pb.SealedBoxPublicKey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.votings_service.EncryptedChoice}
 */
proto.votings_service.EncryptedChoice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.votings_service.EncryptedChoice;
  return proto.votings_service.EncryptedChoice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.votings_service.EncryptedChoice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.votings_service.EncryptedChoice}
 */
proto.votings_service.EncryptedChoice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEncryptedMessage(value);
      break;
    case 2:
      var value = new custom_types_pb.SealedBoxNonce;
      reader.readMessage(value,custom_types_pb.SealedBoxNonce.deserializeBinaryFromReader);
      msg.setNonce(value);
      break;
    case 3:
      var value = new custom_types_pb.SealedBoxPublicKey;
      reader.readMessage(value,custom_types_pb.SealedBoxPublicKey.deserializeBinaryFromReader);
      msg.setPublicKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.votings_service.EncryptedChoice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.votings_service.EncryptedChoice.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.votings_service.EncryptedChoice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.EncryptedChoice.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEncryptedMessage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getNonce();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      custom_types_pb.SealedBoxNonce.serializeBinaryToWriter
    );
  }
  f = message.getPublicKey();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      custom_types_pb.SealedBoxPublicKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes encrypted_message = 1;
 * @return {!(string|Uint8Array)}
 */
proto.votings_service.EncryptedChoice.prototype.getEncryptedMessage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes encrypted_message = 1;
 * This is a type-conversion wrapper around `getEncryptedMessage()`
 * @return {string}
 */
proto.votings_service.EncryptedChoice.prototype.getEncryptedMessage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEncryptedMessage()));
};


/**
 * optional bytes encrypted_message = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEncryptedMessage()`
 * @return {!Uint8Array}
 */
proto.votings_service.EncryptedChoice.prototype.getEncryptedMessage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEncryptedMessage()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.votings_service.EncryptedChoice} returns this
 */
proto.votings_service.EncryptedChoice.prototype.setEncryptedMessage = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional SealedBoxNonce nonce = 2;
 * @return {?proto.votings_service.SealedBoxNonce}
 */
proto.votings_service.EncryptedChoice.prototype.getNonce = function() {
  return /** @type{?proto.votings_service.SealedBoxNonce} */ (
    jspb.Message.getWrapperField(this, custom_types_pb.SealedBoxNonce, 2));
};


/**
 * @param {?proto.votings_service.SealedBoxNonce|undefined} value
 * @return {!proto.votings_service.EncryptedChoice} returns this
*/
proto.votings_service.EncryptedChoice.prototype.setNonce = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.votings_service.EncryptedChoice} returns this
 */
proto.votings_service.EncryptedChoice.prototype.clearNonce = function() {
  return this.setNonce(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.votings_service.EncryptedChoice.prototype.hasNonce = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SealedBoxPublicKey public_key = 3;
 * @return {?proto.votings_service.SealedBoxPublicKey}
 */
proto.votings_service.EncryptedChoice.prototype.getPublicKey = function() {
  return /** @type{?proto.votings_service.SealedBoxPublicKey} */ (
    jspb.Message.getWrapperField(this, custom_types_pb.SealedBoxPublicKey, 3));
};


/**
 * @param {?proto.votings_service.SealedBoxPublicKey|undefined} value
 * @return {!proto.votings_service.EncryptedChoice} returns this
*/
proto.votings_service.EncryptedChoice.prototype.setPublicKey = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.votings_service.EncryptedChoice} returns this
 */
proto.votings_service.EncryptedChoice.prototype.clearPublicKey = function() {
  return this.setPublicKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.votings_service.EncryptedChoice.prototype.hasPublicKey = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.votings_service.Ballot.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.votings_service.Ballot.prototype.toObject = function(opt_includeInstance) {
  return proto.votings_service.Ballot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.votings_service.Ballot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.Ballot.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    voter: (f = msg.getVoter()) && exonum_crypto_types_pb.PublicKey.toObject(includeInstance, f),
    districtId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    encryptedChoice: (f = msg.getEncryptedChoice()) && proto.votings_service.EncryptedChoice.toObject(includeInstance, f),
    decryptedChoicesList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    storeTxHash: (f = msg.getStoreTxHash()) && exonum_crypto_types_pb.Hash.toObject(includeInstance, f),
    decryptTxHash: (f = msg.getDecryptTxHash()) && exonum_crypto_types_pb.Hash.toObject(includeInstance, f),
    status: (f = msg.getStatus()) && variants_ballot_status_pb.BallotStatus.toObject(includeInstance, f),
    sid: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.votings_service.Ballot}
 */
proto.votings_service.Ballot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.votings_service.Ballot;
  return proto.votings_service.Ballot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.votings_service.Ballot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.votings_service.Ballot}
 */
proto.votings_service.Ballot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 2:
      var value = new exonum_crypto_types_pb.PublicKey;
      reader.readMessage(value,exonum_crypto_types_pb.PublicKey.deserializeBinaryFromReader);
      msg.setVoter(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDistrictId(value);
      break;
    case 4:
      var value = new proto.votings_service.EncryptedChoice;
      reader.readMessage(value,proto.votings_service.EncryptedChoice.deserializeBinaryFromReader);
      msg.setEncryptedChoice(value);
      break;
    case 5:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addDecryptedChoices(values[i]);
      }
      break;
    case 6:
      var value = new exonum_crypto_types_pb.Hash;
      reader.readMessage(value,exonum_crypto_types_pb.Hash.deserializeBinaryFromReader);
      msg.setStoreTxHash(value);
      break;
    case 7:
      var value = new exonum_crypto_types_pb.Hash;
      reader.readMessage(value,exonum_crypto_types_pb.Hash.deserializeBinaryFromReader);
      msg.setDecryptTxHash(value);
      break;
    case 8:
      var value = new variants_ballot_status_pb.BallotStatus;
      reader.readMessage(value,variants_ballot_status_pb.BallotStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setSid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.votings_service.Ballot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.votings_service.Ballot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.votings_service.Ballot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.Ballot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getVoter();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      exonum_crypto_types_pb.PublicKey.serializeBinaryToWriter
    );
  }
  f = message.getDistrictId();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getEncryptedChoice();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.votings_service.EncryptedChoice.serializeBinaryToWriter
    );
  }
  f = message.getDecryptedChoicesList();
  if (f.length > 0) {
    writer.writePackedUint32(
      5,
      f
    );
  }
  f = message.getStoreTxHash();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      exonum_crypto_types_pb.Hash.serializeBinaryToWriter
    );
  }
  f = message.getDecryptTxHash();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      exonum_crypto_types_pb.Hash.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      variants_ballot_status_pb.BallotStatus.serializeBinaryToWriter
    );
  }
  f = message.getSid();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional uint32 index = 1;
 * @return {number}
 */
proto.votings_service.Ballot.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.votings_service.Ballot} returns this
 */
proto.votings_service.Ballot.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional exonum.crypto.PublicKey voter = 2;
 * @return {?proto.exonum.crypto.PublicKey}
 */
proto.votings_service.Ballot.prototype.getVoter = function() {
  return /** @type{?proto.exonum.crypto.PublicKey} */ (
    jspb.Message.getWrapperField(this, exonum_crypto_types_pb.PublicKey, 2));
};


/**
 * @param {?proto.exonum.crypto.PublicKey|undefined} value
 * @return {!proto.votings_service.Ballot} returns this
*/
proto.votings_service.Ballot.prototype.setVoter = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.votings_service.Ballot} returns this
 */
proto.votings_service.Ballot.prototype.clearVoter = function() {
  return this.setVoter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.votings_service.Ballot.prototype.hasVoter = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 district_id = 3;
 * @return {number}
 */
proto.votings_service.Ballot.prototype.getDistrictId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.votings_service.Ballot} returns this
 */
proto.votings_service.Ballot.prototype.setDistrictId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional EncryptedChoice encrypted_choice = 4;
 * @return {?proto.votings_service.EncryptedChoice}
 */
proto.votings_service.Ballot.prototype.getEncryptedChoice = function() {
  return /** @type{?proto.votings_service.EncryptedChoice} */ (
    jspb.Message.getWrapperField(this, proto.votings_service.EncryptedChoice, 4));
};


/**
 * @param {?proto.votings_service.EncryptedChoice|undefined} value
 * @return {!proto.votings_service.Ballot} returns this
*/
proto.votings_service.Ballot.prototype.setEncryptedChoice = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.votings_service.Ballot} returns this
 */
proto.votings_service.Ballot.prototype.clearEncryptedChoice = function() {
  return this.setEncryptedChoice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.votings_service.Ballot.prototype.hasEncryptedChoice = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated uint32 decrypted_choices = 5;
 * @return {!Array<number>}
 */
proto.votings_service.Ballot.prototype.getDecryptedChoicesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.votings_service.Ballot} returns this
 */
proto.votings_service.Ballot.prototype.setDecryptedChoicesList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.votings_service.Ballot} returns this
 */
proto.votings_service.Ballot.prototype.addDecryptedChoices = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.votings_service.Ballot} returns this
 */
proto.votings_service.Ballot.prototype.clearDecryptedChoicesList = function() {
  return this.setDecryptedChoicesList([]);
};


/**
 * optional exonum.crypto.Hash store_tx_hash = 6;
 * @return {?proto.exonum.crypto.Hash}
 */
proto.votings_service.Ballot.prototype.getStoreTxHash = function() {
  return /** @type{?proto.exonum.crypto.Hash} */ (
    jspb.Message.getWrapperField(this, exonum_crypto_types_pb.Hash, 6));
};


/**
 * @param {?proto.exonum.crypto.Hash|undefined} value
 * @return {!proto.votings_service.Ballot} returns this
*/
proto.votings_service.Ballot.prototype.setStoreTxHash = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.votings_service.Ballot} returns this
 */
proto.votings_service.Ballot.prototype.clearStoreTxHash = function() {
  return this.setStoreTxHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.votings_service.Ballot.prototype.hasStoreTxHash = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional exonum.crypto.Hash decrypt_tx_hash = 7;
 * @return {?proto.exonum.crypto.Hash}
 */
proto.votings_service.Ballot.prototype.getDecryptTxHash = function() {
  return /** @type{?proto.exonum.crypto.Hash} */ (
    jspb.Message.getWrapperField(this, exonum_crypto_types_pb.Hash, 7));
};


/**
 * @param {?proto.exonum.crypto.Hash|undefined} value
 * @return {!proto.votings_service.Ballot} returns this
*/
proto.votings_service.Ballot.prototype.setDecryptTxHash = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.votings_service.Ballot} returns this
 */
proto.votings_service.Ballot.prototype.clearDecryptTxHash = function() {
  return this.setDecryptTxHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.votings_service.Ballot.prototype.hasDecryptTxHash = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional BallotStatus status = 8;
 * @return {?proto.votings_service.BallotStatus}
 */
proto.votings_service.Ballot.prototype.getStatus = function() {
  return /** @type{?proto.votings_service.BallotStatus} */ (
    jspb.Message.getWrapperField(this, variants_ballot_status_pb.BallotStatus, 8));
};


/**
 * @param {?proto.votings_service.BallotStatus|undefined} value
 * @return {!proto.votings_service.Ballot} returns this
*/
proto.votings_service.Ballot.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.votings_service.Ballot} returns this
 */
proto.votings_service.Ballot.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.votings_service.Ballot.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string sid = 9;
 * @return {string}
 */
proto.votings_service.Ballot.prototype.getSid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.votings_service.Ballot} returns this
 */
proto.votings_service.Ballot.prototype.setSid = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.votings_service.DecryptionStatistics.prototype.toObject = function(opt_includeInstance) {
  return proto.votings_service.DecryptionStatistics.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.votings_service.DecryptionStatistics} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.DecryptionStatistics.toObject = function(includeInstance, msg) {
  var f, obj = {
    decryptedBallotsAmount: jspb.Message.getFieldWithDefault(msg, 1, 0),
    invalidBallotsAmount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.votings_service.DecryptionStatistics}
 */
proto.votings_service.DecryptionStatistics.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.votings_service.DecryptionStatistics;
  return proto.votings_service.DecryptionStatistics.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.votings_service.DecryptionStatistics} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.votings_service.DecryptionStatistics}
 */
proto.votings_service.DecryptionStatistics.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDecryptedBallotsAmount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInvalidBallotsAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.votings_service.DecryptionStatistics.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.votings_service.DecryptionStatistics.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.votings_service.DecryptionStatistics} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.DecryptionStatistics.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDecryptedBallotsAmount();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getInvalidBallotsAmount();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 decrypted_ballots_amount = 1;
 * @return {number}
 */
proto.votings_service.DecryptionStatistics.prototype.getDecryptedBallotsAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.votings_service.DecryptionStatistics} returns this
 */
proto.votings_service.DecryptionStatistics.prototype.setDecryptedBallotsAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 invalid_ballots_amount = 2;
 * @return {number}
 */
proto.votings_service.DecryptionStatistics.prototype.getInvalidBallotsAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.votings_service.DecryptionStatistics} returns this
 */
proto.votings_service.DecryptionStatistics.prototype.setInvalidBallotsAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.votings_service.DistrictResults.prototype.toObject = function(opt_includeInstance) {
  return proto.votings_service.DistrictResults.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.votings_service.DistrictResults} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.DistrictResults.toObject = function(includeInstance, msg) {
  var f, obj = {
    districtId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tallyMap: (f = msg.getTallyMap()) ? f.toObject(includeInstance, undefined) : [],
    invalidBallotsAmount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    uniqueValidBallotsAmount: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.votings_service.DistrictResults}
 */
proto.votings_service.DistrictResults.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.votings_service.DistrictResults;
  return proto.votings_service.DistrictResults.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.votings_service.DistrictResults} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.votings_service.DistrictResults}
 */
proto.votings_service.DistrictResults.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDistrictId(value);
      break;
    case 2:
      var value = msg.getTallyMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readUint32, null, 0, 0);
         });
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInvalidBallotsAmount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUniqueValidBallotsAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.votings_service.DistrictResults.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.votings_service.DistrictResults.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.votings_service.DistrictResults} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.DistrictResults.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDistrictId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTallyMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeUint32);
  }
  f = message.getInvalidBallotsAmount();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getUniqueValidBallotsAmount();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 district_id = 1;
 * @return {number}
 */
proto.votings_service.DistrictResults.prototype.getDistrictId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.votings_service.DistrictResults} returns this
 */
proto.votings_service.DistrictResults.prototype.setDistrictId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * map<uint32, uint32> tally = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.votings_service.DistrictResults.prototype.getTallyMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.votings_service.DistrictResults} returns this
 */
proto.votings_service.DistrictResults.prototype.clearTallyMap = function() {
  this.getTallyMap().clear();
  return this;
};


/**
 * optional uint32 invalid_ballots_amount = 3;
 * @return {number}
 */
proto.votings_service.DistrictResults.prototype.getInvalidBallotsAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.votings_service.DistrictResults} returns this
 */
proto.votings_service.DistrictResults.prototype.setInvalidBallotsAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 unique_valid_ballots_amount = 4;
 * @return {number}
 */
proto.votings_service.DistrictResults.prototype.getUniqueValidBallotsAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.votings_service.DistrictResults} returns this
 */
proto.votings_service.DistrictResults.prototype.setUniqueValidBallotsAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.votings_service.VotingResults.prototype.toObject = function(opt_includeInstance) {
  return proto.votings_service.VotingResults.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.votings_service.VotingResults} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.VotingResults.toObject = function(includeInstance, msg) {
  var f, obj = {
    districtResultsMap: (f = msg.getDistrictResultsMap()) ? f.toObject(includeInstance, proto.votings_service.DistrictResults.toObject) : [],
    invalidBallotsAmount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    uniqueValidBallotsAmount: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.votings_service.VotingResults}
 */
proto.votings_service.VotingResults.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.votings_service.VotingResults;
  return proto.votings_service.VotingResults.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.votings_service.VotingResults} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.votings_service.VotingResults}
 */
proto.votings_service.VotingResults.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getDistrictResultsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readMessage, proto.votings_service.DistrictResults.deserializeBinaryFromReader, 0, new proto.votings_service.DistrictResults());
         });
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInvalidBallotsAmount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUniqueValidBallotsAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.votings_service.VotingResults.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.votings_service.VotingResults.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.votings_service.VotingResults} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.VotingResults.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDistrictResultsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeMessage, proto.votings_service.DistrictResults.serializeBinaryToWriter);
  }
  f = message.getInvalidBallotsAmount();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getUniqueValidBallotsAmount();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * map<uint32, DistrictResults> district_results = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.votings_service.DistrictResults>}
 */
proto.votings_service.VotingResults.prototype.getDistrictResultsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.votings_service.DistrictResults>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.votings_service.DistrictResults));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.votings_service.VotingResults} returns this
 */
proto.votings_service.VotingResults.prototype.clearDistrictResultsMap = function() {
  this.getDistrictResultsMap().clear();
  return this;
};


/**
 * optional uint32 invalid_ballots_amount = 2;
 * @return {number}
 */
proto.votings_service.VotingResults.prototype.getInvalidBallotsAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.votings_service.VotingResults} returns this
 */
proto.votings_service.VotingResults.prototype.setInvalidBallotsAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 unique_valid_ballots_amount = 3;
 * @return {number}
 */
proto.votings_service.VotingResults.prototype.getUniqueValidBallotsAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.votings_service.VotingResults} returns this
 */
proto.votings_service.VotingResults.prototype.setUniqueValidBallotsAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.votings_service.BallotsStorage.prototype.toObject = function(opt_includeInstance) {
  return proto.votings_service.BallotsStorage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.votings_service.BallotsStorage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.BallotsStorage.toObject = function(includeInstance, msg) {
  var f, obj = {
    votingId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    storedBallotsCounterMap: (f = msg.getStoredBallotsCounterMap()) ? f.toObject(includeInstance, undefined) : [],
    decryptedBallotsCounter: (f = msg.getDecryptedBallotsCounter()) && proto.votings_service.DecryptionStatistics.toObject(includeInstance, f),
    votingResults: (f = msg.getVotingResults()) && proto.votings_service.VotingResults.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.votings_service.BallotsStorage}
 */
proto.votings_service.BallotsStorage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.votings_service.BallotsStorage;
  return proto.votings_service.BallotsStorage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.votings_service.BallotsStorage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.votings_service.BallotsStorage}
 */
proto.votings_service.BallotsStorage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVotingId(value);
      break;
    case 2:
      var value = msg.getStoredBallotsCounterMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readUint32, null, 0, 0);
         });
      break;
    case 3:
      var value = new proto.votings_service.DecryptionStatistics;
      reader.readMessage(value,proto.votings_service.DecryptionStatistics.deserializeBinaryFromReader);
      msg.setDecryptedBallotsCounter(value);
      break;
    case 4:
      var value = new proto.votings_service.VotingResults;
      reader.readMessage(value,proto.votings_service.VotingResults.deserializeBinaryFromReader);
      msg.setVotingResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.votings_service.BallotsStorage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.votings_service.BallotsStorage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.votings_service.BallotsStorage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.votings_service.BallotsStorage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVotingId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStoredBallotsCounterMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeUint32);
  }
  f = message.getDecryptedBallotsCounter();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.votings_service.DecryptionStatistics.serializeBinaryToWriter
    );
  }
  f = message.getVotingResults();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.votings_service.VotingResults.serializeBinaryToWriter
    );
  }
};


/**
 * optional string voting_id = 1;
 * @return {string}
 */
proto.votings_service.BallotsStorage.prototype.getVotingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.votings_service.BallotsStorage} returns this
 */
proto.votings_service.BallotsStorage.prototype.setVotingId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * map<uint32, uint32> stored_ballots_counter = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.votings_service.BallotsStorage.prototype.getStoredBallotsCounterMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.votings_service.BallotsStorage} returns this
 */
proto.votings_service.BallotsStorage.prototype.clearStoredBallotsCounterMap = function() {
  this.getStoredBallotsCounterMap().clear();
  return this;
};


/**
 * optional DecryptionStatistics decrypted_ballots_counter = 3;
 * @return {?proto.votings_service.DecryptionStatistics}
 */
proto.votings_service.BallotsStorage.prototype.getDecryptedBallotsCounter = function() {
  return /** @type{?proto.votings_service.DecryptionStatistics} */ (
    jspb.Message.getWrapperField(this, proto.votings_service.DecryptionStatistics, 3));
};


/**
 * @param {?proto.votings_service.DecryptionStatistics|undefined} value
 * @return {!proto.votings_service.BallotsStorage} returns this
*/
proto.votings_service.BallotsStorage.prototype.setDecryptedBallotsCounter = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.votings_service.BallotsStorage} returns this
 */
proto.votings_service.BallotsStorage.prototype.clearDecryptedBallotsCounter = function() {
  return this.setDecryptedBallotsCounter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.votings_service.BallotsStorage.prototype.hasDecryptedBallotsCounter = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional VotingResults voting_results = 4;
 * @return {?proto.votings_service.VotingResults}
 */
proto.votings_service.BallotsStorage.prototype.getVotingResults = function() {
  return /** @type{?proto.votings_service.VotingResults} */ (
    jspb.Message.getWrapperField(this, proto.votings_service.VotingResults, 4));
};


/**
 * @param {?proto.votings_service.VotingResults|undefined} value
 * @return {!proto.votings_service.BallotsStorage} returns this
*/
proto.votings_service.BallotsStorage.prototype.setVotingResults = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.votings_service.BallotsStorage} returns this
 */
proto.votings_service.BallotsStorage.prototype.clearVotingResults = function() {
  return this.setVotingResults(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.votings_service.BallotsStorage.prototype.hasVotingResults = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.votings_service);
